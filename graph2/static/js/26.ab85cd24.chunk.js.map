{"version":3,"sources":["components/modals/TreeReport/TreeReport.tsx","components/modals/TreeReport/index.ts"],"names":["TreeReport","inject","observer","props","_onSave","a","state","date","graphID","graphName","graphStore","onClose","diagramStore","graphString","toString","graphNameString","dateTime","docTitle","diagram","document","querySelector","oldPositionX","position","x","oldPositionY","y","oldScale","scale","style","height","documentBounds","width","requestUpdate","setTimeout","direction","go","setPositionScale","domtoimage","toPng","left","top","then","dataUrl","substr","getTreeReport","catch","error","console","log","today","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","getSchemeId","getGraphName","nameGraph","this","Dialog","withOverlay","options","opened","type","title","okText","text","onConfirm","onCancel","PureComponent"],"mappings":"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","file":"static/js/26.ab85cd24.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport * as go from 'gojs';\r\n\r\n//@ts-ignore\r\nimport domtoimage from 'dom-to-image';\r\n\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport Dialog from 'components/Dialog';\r\n\r\nimport { GraphStoreType } from '../../../stores/graph/graphStore';\r\nimport { DiagramStoreType } from '../../../stores/graph/diagramStore';\r\nimport { CommonStoreType } from '../../../stores/common/commonStore';\r\n\r\ntype TreeReportProps = {\r\n  graphStore?: GraphStoreType;\r\n  diagramStore?: DiagramStoreType;\r\n  commonStore?: CommonStoreType;\r\n  [key: string]: any;\r\n};\r\n\r\ntype TreeReportState = {\r\n  date: any;\r\n  graphID: any;\r\n  graphName: any;\r\n  nameGraph: any;\r\n};\r\n\r\n/**\r\n * Компонент модального окна по генерации Отчёта \"Дерево связей\"\r\n */\r\n@inject('graphStore', 'diagramStore')\r\n@observer\r\nclass TreeReport extends PureComponent<TreeReportProps, TreeReportState> {\r\n  constructor(props: TreeReportProps) {\r\n    super(props);\r\n\r\n    const { graphStore } = props;\r\n\r\n    const today = new Date(),\r\n      date =\r\n        (today.getDate() < 10 ? '0' + today.getDate() : today.getDate()) +\r\n        '-' +\r\n        (today.getMonth() + 1 < 10 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1) +\r\n        '-' +\r\n        today.getFullYear().toString().substr(-2) +\r\n        ' ' +\r\n        (today.getHours() < 10 ? '0' + today.getHours() : today.getHours()) +\r\n        ':' +\r\n        (today.getMinutes() < 10 ? '0' + today.getMinutes() : today.getMinutes()) +\r\n        ':' +\r\n        (today.getSeconds() < 10 ? '0' + today.getSeconds() : today.getSeconds());\r\n\r\n    const graphID = graphStore?.getSchemeId;\r\n    const graphName = graphStore?.getGraphName;\r\n\r\n    const nameGraph = graphID\r\n      ? 'Отчет по дереву связей по схеме ' + graphID + ' от ' + date.toString()\r\n      : 'Отчет по дереву связей по схеме ' + graphName;\r\n\r\n    this.state = {\r\n      date: date,\r\n      graphID: graphID,\r\n      graphName: graphName,\r\n      nameGraph: nameGraph,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Функция на сохранение отчёта\r\n   * @private\r\n   */\r\n  _onSave = async (): Promise<void> => {\r\n    const { date, graphID, graphName } = this.state;\r\n    const { graphStore, onClose, diagramStore } = this.props;\r\n    let graphString = graphID ? graphID.toString() : '';\r\n    let graphNameString = graphName ? graphName.toString() : '';\r\n\r\n    let dateTime = date.toString();\r\n    let docTitle = graphID\r\n      ? 'Отчет по дереву связей по схеме ' + graphString + ' от ' + dateTime + '.xlsx'\r\n      : 'Отчет по дереву связей по схеме ' + graphNameString + '.xlsx';\r\n\r\n    const diagram = document.querySelector('.diagram-component') as HTMLElement;\r\n\r\n    // позиция и зум графа перед скрином\r\n    const oldPositionX = diagramStore?.diagram?.position.x;\r\n    const oldPositionY = diagramStore?.diagram?.position.y;\r\n    const oldScale = diagramStore?.diagram?.scale;\r\n\r\n    // размеры для контейнера, равные размеру графа\r\n    diagram.style.height = diagramStore?.diagram?.documentBounds.height + 'px';\r\n    diagram.style.width = diagramStore?.diagram?.documentBounds.width + 'px';\r\n\r\n    diagramStore?.diagram?.requestUpdate();\r\n\r\n    setTimeout(() => {\r\n      // позиция для графа в левый верхний угол и зум 1\r\n      let position =\r\n        diagramStore?.direction === 0 ? new go.Point(-60, -35) : new go.Point(-35, -35);\r\n      let scale = 1;\r\n      diagramStore?.setPositionScale(position, scale);\r\n    }, 1);\r\n\r\n    setTimeout(() => {\r\n      // скрин всего контейнера\r\n      domtoimage\r\n        .toPng(diagram, {\r\n          width: diagramStore?.diagram?.documentBounds.width,\r\n          height: diagramStore?.diagram?.documentBounds.height,\r\n          style: {\r\n            left: 0,\r\n            top: 0,\r\n          },\r\n        })\r\n        .then(async (dataUrl: any) => {\r\n          // ширина и высота для контейнера к 100%\r\n          diagram.style.height = '';\r\n          diagram.style.width = '';\r\n          diagramStore?.diagram?.requestUpdate();\r\n\r\n          setTimeout(() => {\r\n            // позиция графа, которая была до скрина\r\n            let position = new go.Point(oldPositionX, oldPositionY);\r\n            let scale = oldScale;\r\n            diagramStore?.setPositionScale(position, scale);\r\n          }, 100);\r\n\r\n          dataUrl = dataUrl.substr(22);\r\n\r\n          await graphStore?.getTreeReport(dataUrl, docTitle);\r\n        })\r\n        .catch((error: any) => {\r\n          setTimeout(() => {\r\n            // позиция графа, которая была до скрина\r\n            let position = new go.Point(oldPositionX, oldPositionY);\r\n            let scale = oldScale;\r\n            diagramStore?.setPositionScale(position, scale);\r\n          }, 100);\r\n          console.log(error);\r\n        });\r\n    }, 100);\r\n\r\n    onClose();\r\n  };\r\n\r\n  /**\r\n   * Метод отрисовывает элементы на странице\r\n   */\r\n  render() {\r\n    const { onClose } = this.props;\r\n    const { date, graphID, graphName } = this.state;\r\n\r\n    return (\r\n      <Dialog\r\n        withOverlay={false}\r\n        options={{\r\n          opened: true,\r\n          type: 'confirm',\r\n          title: 'Генерация отчёта',\r\n          okText: 'Сохранить',\r\n          text: graphID\r\n            ? 'Отчет по дереву связей по схеме ' + graphID + ' от ' + date.toString()\r\n            : 'Отчет по дереву связей по схеме ' + graphName,\r\n          onConfirm: this._onSave,\r\n          onCancel: onClose,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TreeReport;\r\n","export { default } from './TreeReport';\r\n"],"sourceRoot":""}