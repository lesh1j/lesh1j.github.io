{"version":3,"sources":["components/modals/SearchNode/SearchNode.module.scss","components/modals/SearchNode/Nodes/Nodes.module.scss","components/modals/SearchNode/Nodes/Nodes.tsx","components/modals/SearchNode/SearchNode.tsx","components/modals/SearchNode/index.ts"],"names":["module","exports","Nodes","state","showAdditionalInfo","hovered","wrapperRef","React","createRef","hoverTimeout","clickTimeout","_toggleShowAdditionalInfo","setState","_onHover","clearTimeout","setTimeout","_onUnHover","_onClick","_onDoubleClickNode","props","onSelect","nodes","this","wrapperStyle","theme","className","styles","wrapper","ref","onDoubleClick","onMouseEnter","onMouseLeave","main","inn","name","additional","additionalData","additionalDataContainer","dataName","dataValue","registration_date","formatDate","status","additionalButtonContainer","additionalButtonLabel","onClick","Icon","additionalInfoIcon","rotate","director","ufns_code","score","formatIntegralAssessment","PureComponent","defaultProps","SearchNode","inject","observer","searchValue","request","_onChange","value","length","commonStore","resetNodesGraphOrder","_onSearch","graphStore","nodesGraph","pending","ApiServices","source","cancel","nodesGraphPendingFalse","searchNodesByTextInGraph","previouslyGraphId","nodesGraphPendingTrue","_onReset","_onClose","modalStore","closeModal","MODAL_SEARCH_NODE_IN_GRAPH","_findNode","a","diagramStore","id","regDate","ufnsCode","fid","targetNode","diagram","findNodesByExample","key","first","part","commandHandler","scrollToPart","isSelected","focusNode","Modal","onClose","container","Search","search","onChange","onSearch","autoSearchTimeout","placeholder","autoFocus","withResetRight","onReset","withButton","appTheme","error","errorText","loader","Loader","list","noResults","emptyContainer","emptyText","order","map","item","index"],"mappings":"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","file":"static/js/16.9a6c3eb6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchNode_container__2xxiO\",\"loader\":\"SearchNode_loader__3vOTp\",\"search\":\"SearchNode_search__DKQuV\",\"list\":\"SearchNode_list__3fYHF\",\"item\":\"SearchNode_item__2mnd9\",\"emptyContainer\":\"SearchNode_emptyContainer__3zXxG\",\"emptyText\":\"SearchNode_emptyText__3Y-xh\",\"error\":\"SearchNode_error__3w42t\",\"errorText\":\"SearchNode_errorText__2i91A\",\"actions\":\"SearchNode_actions__31I_J\",\"action\":\"SearchNode_action__6_oLA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Nodes_wrapper__2tuvt\",\"main\":\"Nodes_main__RwWlC\",\"additional\":\"Nodes_additional__3su_Y\",\"fadeIn\":\"Nodes_fadeIn__2DVER\",\"additionalData\":\"Nodes_additionalData__eZ3PU\",\"additionalDataContainer\":\"Nodes_additionalDataContainer__3kTeK\",\"inn\":\"Nodes_inn__7JUAg\",\"name\":\"Nodes_name__1oW3b\",\"dataName\":\"Nodes_dataName__31pKk\",\"dataValue\":\"Nodes_dataValue__19RWH\",\"additionalButtonContainer\":\"Nodes_additionalButtonContainer__2VkP3\",\"additionalButtonLabel\":\"Nodes_additionalButtonLabel__h7InT\",\"additionalInfoIcon\":\"Nodes_additionalInfoIcon__e0BKL\"};","import React, { PureComponent } from 'react';\r\nimport { nodeSearchPropTypes } from './Nodes.props';\r\nimport styles from './Nodes.module.scss';\r\n\r\nimport Icon from '../../../Icon';\r\n\r\nimport { formatDate } from '../../../../utils/ui/formatDate';\r\n\r\nimport { TaxpayerType } from 'DataTypes';\r\nimport { formatIntegralAssessment } from '../../../../utils/ui/formatIntegralAssessment';\r\n\r\ninterface NodesProps {\r\n  nodes: TaxpayerType;\r\n  onSelect: (data: any) => void;\r\n  wrapperStyle?: string;\r\n  theme?: string;\r\n}\r\n\r\ninterface NodesState {\r\n  showAdditionalInfo: boolean;\r\n  hovered: boolean;\r\n}\r\n\r\n/**\r\n * Компонент НП для списка НП\r\n */\r\nclass Nodes extends PureComponent<NodesProps, NodesState> {\r\n  static propTypes = nodeSearchPropTypes;\r\n\r\n  static defaultProps = {\r\n    wrapperStyle: '',\r\n  };\r\n\r\n  state = {\r\n    showAdditionalInfo: false,\r\n    hovered: false,\r\n  };\r\n\r\n  wrapperRef = React.createRef<HTMLDivElement>();\r\n  hoverTimeout: any;\r\n  clickTimeout: any;\r\n\r\n  /**\r\n   * Метод переключает состояние дополнительной информации\r\n   */\r\n  _toggleShowAdditionalInfo = (): void => {\r\n    this.setState({ showAdditionalInfo: !this.state.showAdditionalInfo });\r\n  };\r\n\r\n  /**\r\n   * Метод переключает состояние наведение на true\r\n   */\r\n  _onHover = (): void => {\r\n    clearTimeout(this.hoverTimeout);\r\n\r\n    this.hoverTimeout = setTimeout(() => {\r\n      this.setState({ hovered: true });\r\n    }, 300);\r\n  };\r\n\r\n  /**\r\n   * Метод переключает состояние наведение на false\r\n   */\r\n  _onUnHover = (): void => {\r\n    clearTimeout(this.hoverTimeout);\r\n    this.setState({ hovered: false });\r\n  };\r\n\r\n  /**\r\n   * Метод обрабатывает событие клика\r\n   */\r\n  _onClick = (): void => {\r\n    const secondClickTimeout = 300;\r\n\r\n    clearTimeout(this.clickTimeout);\r\n    this.clickTimeout = setTimeout(this._toggleShowAdditionalInfo, secondClickTimeout);\r\n  };\r\n\r\n  /**\r\n   * Метод фокусировки на узле\r\n   */\r\n  _onDoubleClickNode = (): void => {\r\n    clearTimeout(this.clickTimeout);\r\n\r\n    const { onSelect, nodes } = this.props;\r\n    onSelect(nodes);\r\n  };\r\n\r\n  /**\r\n   * Метод отрисовывает элементы\r\n   */\r\n  render() {\r\n    const {\r\n      props: { nodes, wrapperStyle, theme },\r\n      state: { hovered, showAdditionalInfo },\r\n    } = this;\r\n\r\n    return (\r\n      <div\r\n        className={`${styles.wrapper} ${wrapperStyle}`}\r\n        ref={this.wrapperRef}\r\n        onDoubleClick={this._onDoubleClickNode}\r\n        onMouseEnter={this._onHover}\r\n        onMouseLeave={this._onUnHover}\r\n      >\r\n        <div className={styles.main}>\r\n          <span className={styles.inn}>{nodes.inn}</span>\r\n          <span className={styles.name}>{nodes.name}</span>\r\n        </div>\r\n        {hovered && (\r\n          <div className={styles.additional}>\r\n            <div className={styles.additionalData}>\r\n              <div className={styles.additionalDataContainer}>\r\n                <span className={styles.dataName}>Дата регистрации:</span>\r\n                <span className={styles.dataValue}>\r\n                  {nodes?.registration_date ? formatDate(nodes.registration_date) : ''}\r\n                </span>\r\n              </div>\r\n              <div className={styles.additionalDataContainer}>\r\n                <span className={styles.dataName}>Статус НП:</span>\r\n                <span className={styles.dataValue}>{nodes.status}</span>\r\n              </div>\r\n            </div>\r\n            <div className={styles.additionalButtonContainer}>\r\n              <span\r\n                className={styles.additionalButtonLabel}\r\n                onClick={this._toggleShowAdditionalInfo}\r\n              >\r\n                Дополнительная информация\r\n              </span>\r\n              <Icon\r\n                className={`${styles.additionalInfoIcon} ${\r\n                  showAdditionalInfo ? styles.rotate : ''\r\n                }`}\r\n                name=\"arrow_down\"\r\n                onClick={this._toggleShowAdditionalInfo}\r\n                theme={theme}\r\n              />\r\n            </div>\r\n            {showAdditionalInfo && (\r\n              <div className={styles.additionalData}>\r\n                <div className={styles.additionalDataContainer}>\r\n                  <span className={styles.dataName}>Руководитель НП</span>\r\n                  <span className={styles.dataValue}>{nodes.director}</span>\r\n                </div>\r\n                <div className={styles.additionalDataContainer}>\r\n                  <span className={styles.dataName}>Код НО, постановки на учет:</span>\r\n                  <span className={styles.dataValue}>{nodes.ufns_code}</span>\r\n                </div>\r\n                <div className={styles.additionalDataContainer}>\r\n                  <span className={styles.dataName}>СУР АСК НДС-2:</span>\r\n                  <span className={styles.dataValue}>\r\n                    {nodes.score && formatIntegralAssessment(nodes.score)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nodes;\r\n","import React, { PureComponent } from 'react';\r\nimport styles from './SearchNode.module.scss';\r\n\r\nimport Loader from '../../Loader';\r\nimport Search from '../../Search';\r\nimport { Modal, ModalBody, ModalHeader } from '../Modal';\r\nimport Nodes from './Nodes';\r\n\r\nimport { inject, observer } from 'mobx-react';\r\nimport ApiServices from '../../../utils/services/api/ApiServices';\r\nimport { MODAL_SEARCH_NODE_IN_GRAPH } from '../constants/modalNames';\r\n\r\ninterface SearchNodeProps {\r\n  commonStore?: any;\r\n  modalStore?: any;\r\n  graphStore?: any;\r\n  diagramStore?: any;\r\n}\r\n\r\ninterface SearchNodeState {\r\n  // Значение поля поиска\r\n  searchValue: string;\r\n}\r\n\r\n/**\r\n * Компонент добавления нового узла(поиск по ИНН и наименованию)\r\n */\r\n@inject('commonStore', 'modalStore', 'graphStore', 'diagramStore')\r\n@observer\r\nclass SearchNode extends PureComponent<SearchNodeProps, SearchNodeState> {\r\n  state = {\r\n    searchValue: '',\r\n  };\r\n\r\n  request: any;\r\n\r\n  /**\r\n   * Метод изменяет значение поля ввода\r\n   */\r\n  _onChange = (value: string): void => {\r\n    this.setState({ searchValue: value });\r\n\r\n    if (value.length === 0) {\r\n      const { commonStore } = this.props;\r\n      commonStore.resetNodesGraphOrder();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Метод отправляет запрос на поиск\r\n   */\r\n  _onSearch = (): void => {\r\n    const {\r\n      state: { searchValue },\r\n      props: { commonStore, graphStore },\r\n    } = this;\r\n\r\n    commonStore.resetNodesGraphOrder();\r\n\r\n    if (commonStore.nodesGraph.pending) {\r\n      ApiServices.source.cancel();\r\n      commonStore.nodesGraphPendingFalse();\r\n    }\r\n\r\n    if (searchValue) {\r\n      commonStore.searchNodesByTextInGraph(searchValue, graphStore!.previouslyGraphId);\r\n      commonStore.nodesGraphPendingTrue();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Метод очищает поле ввода\r\n   */\r\n  _onReset = (): void => {\r\n    const { commonStore } = this.props;\r\n\r\n    if (!commonStore.nodesGraph.pending) {\r\n      this.setState({ searchValue: '' });\r\n      commonStore.resetNodesGraphOrder();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Метод очищает список найденных узлов и закрывает окно\r\n   */\r\n  _onClose = (): void => {\r\n    const { modalStore, commonStore } = this.props;\r\n    commonStore.resetNodesGraphOrder();\r\n\r\n    if (commonStore.nodesGraph.pending) {\r\n      ApiServices.source.cancel();\r\n      commonStore.nodesGraphPendingFalse();\r\n    }\r\n\r\n    modalStore.closeModal(MODAL_SEARCH_NODE_IN_GRAPH);\r\n  };\r\n\r\n  _findNode = async (nodes: any): Promise<void> => {\r\n    const { diagramStore, graphStore } = this.props;\r\n    const { id, inn, name, regDate, status, director, score, ufnsCode, fid } = nodes;\r\n\r\n    let targetNode: go.Part | null | undefined;\r\n\r\n    targetNode = diagramStore.diagram?.findNodesByExample({ key: id }).first()?.part;\r\n\r\n    if (targetNode) {\r\n      diagramStore.diagram?.commandHandler.scrollToPart(targetNode);\r\n      targetNode.isSelected = true;\r\n    } else {\r\n      graphStore.focusNode({\r\n        inn: inn,\r\n        id: id,\r\n        name: name,\r\n        regDate: regDate,\r\n        status: status,\r\n        director: director,\r\n        score: score,\r\n        ufnsCode: ufnsCode,\r\n        fid: fid,\r\n      });\r\n    }\r\n\r\n    this._onClose();\r\n  };\r\n\r\n  /**\r\n   * Метод рисует элементы на странице\r\n   */\r\n  render() {\r\n    const {\r\n      state: { searchValue },\r\n      props: { commonStore },\r\n    } = this;\r\n\r\n    return (\r\n      <Modal>\r\n        <ModalHeader onClose={this._onClose}>Найти узел</ModalHeader>\r\n\r\n        <ModalBody>\r\n          <div className={styles.container}>\r\n            <Search\r\n              className={styles.search}\r\n              value={searchValue}\r\n              onChange={this._onChange}\r\n              onSearch={this._onSearch}\r\n              autoSearchTimeout={700}\r\n              placeholder={'Введите значение для поиска'}\r\n              autoFocus\r\n              withResetRight\r\n              onReset={this._onReset}\r\n              withButton\r\n              theme={commonStore.appTheme}\r\n            />\r\n            {searchValue.length > 0 &&\r\n              (commonStore.nodesGraph.error ? (\r\n                <div className={styles.error}>\r\n                  <span className={styles.errorText}>{'Поиск не дал результатов'}</span>\r\n                </div>\r\n              ) : commonStore.nodesGraph.pending ? (\r\n                <div className={styles.loader}>\r\n                  <Loader />\r\n                </div>\r\n              ) : (\r\n                <div className={styles.list}>\r\n                  {commonStore.nodesGraph.noResults ? (\r\n                    <div className={styles.emptyContainer}>\r\n                      <span className={styles.emptyText}>Поиск не дал результатов.</span>\r\n                    </div>\r\n                  ) : (\r\n                    commonStore.nodesGraph.order.map((item: any, index: number) => (\r\n                      <div key={'nodes-search-list-item' + index} className={styles.item}>\r\n                        <Nodes\r\n                          onSelect={this._findNode}\r\n                          nodes={item}\r\n                          theme={commonStore.appTheme}\r\n                        />\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </ModalBody>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchNode;\r\n","export { default } from './SearchNode';\r\n"],"sourceRoot":""}