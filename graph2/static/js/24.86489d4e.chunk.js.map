{"version":3,"sources":["components/modals/GetReference/GetReference.tsx","components/modals/GetReference/index.ts"],"names":["GetReference","inject","observer","props","_onSave","a","state","date","graphID","graphName","reportGraphID","graphStore","onClose","graphString","toString","graphNameString","graphReportString","dateTime","docTitle","window","CefSharp","statePending","BindObjectAsync","unifiedClientIntegration","executeFunction","JSON","stringify","graph_id","file_name","onError","name","message","stateDone","getFormalReference","today","Date","getDate","getMonth","getFullYear","substr","getHours","getMinutes","getSeconds","getSchemeId","getGraphName","previouslyFetchedGraphId","nameGraph","this","Dialog","withOverlay","options","opened","type","title","okText","text","onConfirm","onCancel","PureComponent"],"mappings":"gMAuIeA,EA7GdC,YAAO,aAAc,c,GACrBC,Y,oDAEC,WAAYC,GAA2B,IAAD,uBACpC,cAAMA,IAwCRC,QAzCsC,sBAyC5B,oDAAAC,EAAA,2DAC4C,EAAKC,MAAjDC,EADA,EACAA,KAAMC,EADN,EACMA,QAASC,EADf,EACeA,UAAWC,EAD1B,EAC0BA,cAD1B,EAEwB,EAAKP,MAA7BQ,EAFA,EAEAA,WAAYC,EAFZ,EAEYA,QAChBC,EAAcL,EAAUA,EAAQM,WAAa,GAC7CC,EAAkBN,EAAYA,EAAUK,WAAa,GAErDE,EAAoBN,EAAgBA,EAAcI,WAAa,GAE/DG,EAAWV,EAAKO,WAChBI,EAAWV,EACX,qKAAqCK,EAAc,iBAASI,EAC5D,qKAAqCF,EAGV,kBAApBI,OAAOC,SAdV,wBAeI,OAAVT,QAAU,IAAVA,KAAYU,eAfN,UAiBAD,SAASE,gBAAgB,4BAjBzB,yBAmBeC,yBAAyBC,gBAC5C,aACA,8BACAC,KAAKC,UAAU,CACbC,SAAUX,EACVY,UAAWV,KAxBT,gBA8BM,OAAVP,QAAU,IAAVA,KAAYkB,QAAQ,CAAEC,KAAM,QAASC,QAAS,qLAFpC,OAAVpB,QAAU,IAAVA,KAAYqB,YA5BR,gDAkCArB,QAlCA,IAkCAA,OAlCA,EAkCAA,EAAYsB,mBAAmBf,GAlC/B,QAoCRN,IApCQ,4CAzC4B,IAG5BD,EAAeR,EAAfQ,WAEFuB,EAAQ,IAAIC,KAChB5B,GACG2B,EAAME,UAAY,GAAK,IAAMF,EAAME,UAAYF,EAAME,WACtD,KACCF,EAAMG,WAAa,EAAI,GAAK,KAAOH,EAAMG,WAAa,GAAKH,EAAMG,WAAa,GAC/E,IACAH,EAAMI,cAAcxB,WAAWyB,QAAQ,GACvC,KACCL,EAAMM,WAAa,GAAK,IAAMN,EAAMM,WAAaN,EAAMM,YACxD,KACCN,EAAMO,aAAe,GAAK,IAAMP,EAAMO,aAAeP,EAAMO,cAC5D,KACCP,EAAMQ,aAAe,GAAK,IAAMR,EAAMQ,aAAeR,EAAMQ,cAE1DlC,EAAO,OAAGG,QAAH,IAAGA,OAAH,EAAGA,EAAYgC,YACtBlC,EAAS,OAAGE,QAAH,IAAGA,OAAH,EAAGA,EAAYiC,aAExBlC,EAAa,OAAGC,QAAH,IAAGA,OAAH,EAAGA,EAAYkC,yBAE5BC,EAAYtC,EACd,qKAAqCA,EAAU,iBAASD,EAAKO,WAC7D,qKAAqCL,EA1BL,OA4BpC,EAAKH,MAAQ,CACXC,KAAMA,EACNC,QAASA,EACTC,UAAWA,EACXqC,UAAWA,EACXpC,cAAeA,GAjCmB,E,0CAmFtC,WAAU,IACAE,EAAYmC,KAAK5C,MAAjBS,QADD,EAE8BmC,KAAKzC,MAAlCC,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,UAEvB,OACE,kBAACuC,EAAA,EAAD,CACEC,aAAa,EACbC,QAAS,CACPC,QAAQ,EACRC,KAAM,UACNC,MAAO,+KACPC,OAAQ,yDACRC,KAAM/C,EACF,qKAAqCA,EAAU,iBAASD,EAAKO,WAC7D,qKAAqCL,EACzC+C,UAAWT,KAAK3C,QAChBqD,SAAU7C,S,GApGO8C,mB,MC5B3B","file":"static/js/24.86489d4e.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport Dialog from 'components/Dialog';\r\n\r\nimport { GraphStoreType } from '../../../stores/graph/graphStore';\r\nimport { CommonStoreType } from '../../../stores/common/commonStore';\r\n\r\ntype GetReferenceProps = {\r\n  graphStore?: GraphStoreType;\r\n  commonStore?: CommonStoreType;\r\n  [key: string]: any;\r\n};\r\n\r\ntype GetReferenceState = {\r\n  date: any;\r\n  graphID: any;\r\n  graphName: any;\r\n  nameGraph: any;\r\n  reportGraphID: any;\r\n};\r\n\r\n/**\r\n * Компонент модального окна по генерации Проекта акта\r\n */\r\n@inject('graphStore', 'commonStore')\r\n@observer\r\nclass GetReference extends PureComponent<GetReferenceProps, GetReferenceState> {\r\n  constructor(props: GetReferenceProps) {\r\n    super(props);\r\n\r\n    const { graphStore } = props;\r\n\r\n    const today = new Date(),\r\n      date =\r\n        (today.getDate() < 10 ? '0' + today.getDate() : today.getDate()) +\r\n        '-' +\r\n        (today.getMonth() + 1 < 10 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1) +\r\n        '-' +\r\n        today.getFullYear().toString().substr(-2) +\r\n        ' ' +\r\n        (today.getHours() < 10 ? '0' + today.getHours() : today.getHours()) +\r\n        ':' +\r\n        (today.getMinutes() < 10 ? '0' + today.getMinutes() : today.getMinutes()) +\r\n        ':' +\r\n        (today.getSeconds() < 10 ? '0' + today.getSeconds() : today.getSeconds());\r\n\r\n    const graphID = graphStore?.getSchemeId;\r\n    const graphName = graphStore?.getGraphName;\r\n\r\n    const reportGraphID = graphStore?.previouslyFetchedGraphId;\r\n\r\n    const nameGraph = graphID\r\n      ? 'Справка к проекту акта по схеме ' + graphID + ' от ' + date.toString()\r\n      : 'Справка к проекту акта по схеме ' + graphName;\r\n\r\n    this.state = {\r\n      date: date,\r\n      graphID: graphID,\r\n      graphName: graphName,\r\n      nameGraph: nameGraph,\r\n      reportGraphID: reportGraphID,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Функция на сохранение справки\r\n   * @private\r\n   */\r\n  _onSave = async (): Promise<void> => {\r\n    const { date, graphID, graphName, reportGraphID } = this.state;\r\n    const { graphStore, onClose } = this.props;\r\n    let graphString = graphID ? graphID.toString() : '';\r\n    let graphNameString = graphName ? graphName.toString() : '';\r\n\r\n    let graphReportString = reportGraphID ? reportGraphID.toString() : '';\r\n\r\n    let dateTime = date.toString();\r\n    let docTitle = graphID\r\n      ? 'Справка к проекту акта по схеме ' + graphString + ' от ' + dateTime\r\n      : 'Справка к проекту акта по схеме ' + graphNameString;\r\n\r\n    // @ts-ignore\r\n    if (typeof window.CefSharp === 'object') {\r\n      graphStore?.statePending();\r\n      // @ts-ignore\r\n      await CefSharp.BindObjectAsync('unifiedClientIntegration');\r\n      // @ts-ignore\r\n      const result = await unifiedClientIntegration.executeFunction(\r\n        'Vsa2Domain',\r\n        'VsaGetFormalizedCertificate',\r\n        JSON.stringify({\r\n          graph_id: graphReportString,\r\n          file_name: docTitle,\r\n        }),\r\n      );\r\n      if (result) {\r\n        graphStore?.stateDone();\r\n      } else {\r\n        graphStore?.onError({ name: 'Error', message: 'Невозможно сформировать справку' });\r\n        graphStore?.stateDone();\r\n      }\r\n    } else {\r\n      await graphStore?.getFormalReference(docTitle);\r\n    }\r\n    onClose();\r\n  };\r\n\r\n  /**\r\n   * Метод отрисовывает элементы на странице\r\n   */\r\n  render() {\r\n    const { onClose } = this.props;\r\n    const { date, graphID, graphName } = this.state;\r\n\r\n    return (\r\n      <Dialog\r\n        withOverlay={false}\r\n        options={{\r\n          opened: true,\r\n          type: 'confirm',\r\n          title: 'Генерация справки к проекту акта',\r\n          okText: 'Сохранить',\r\n          text: graphID\r\n            ? 'Справка к проекту акта по схеме ' + graphID + ' от ' + date.toString()\r\n            : 'Справка к проекту акта по схеме ' + graphName,\r\n          onConfirm: this._onSave,\r\n          onCancel: onClose,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GetReference;\r\n","export { default } from './GetReference';\r\n"],"sourceRoot":""}