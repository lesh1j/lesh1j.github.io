{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?7e02","webpack:///./src/App.vue?6e8f","webpack:///./src/generators/customlng.js","webpack:///./src/generators/customlng/colour.js","webpack:///./src/generators/customlng/logic.js","webpack:///./src/generators/customlng/loops.js","webpack:///./src/generators/customlng/math.js","webpack:///./src/generators/customlng/procedures.js","webpack:///./src/generators/customlng/text.js","webpack:///./src/generators/customlng/variables_dynamic.js","webpack:///./src/generators/customlng/variables.js","webpack:///./src/blocks/stocks.js","webpack:///./src/prompt.js","webpack:///./src/langs/ru.js","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","staticClass","ref","on","$event","updateConsts","_v","class","tabs__button","active","openedTab","openTab","style","opacity","visibility","domProps","_s","code","fromXML","toXML","staticRenderFns","Blockly","CustomLng","Generator","addReservedWords","getOwnPropertyNames","utils","global","join","ORDER_ATOMIC","ORDER_NEW","ORDER_MEMBER","ORDER_FUNCTION_CALL","ORDER_INCREMENT","ORDER_DECREMENT","ORDER_BITWISE_NOT","ORDER_UNARY_PLUS","ORDER_UNARY_NEGATION","ORDER_LOGICAL_NOT","ORDER_TYPEOF","ORDER_VOID","ORDER_DELETE","ORDER_AWAIT","ORDER_EXPONENTIATION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_MODULUS","ORDER_SUBTRACTION","ORDER_ADDITION","ORDER_BITWISE_SHIFT","ORDER_RELATIONAL","ORDER_IN","ORDER_INSTANCEOF","ORDER_EQUALITY","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_CONDITIONAL","ORDER_ASSIGNMENT","ORDER_YIELD","ORDER_COMMA","ORDER_NONE","ORDER_OVERRIDES","isInitialized","init","workspace","definitions_","functionNames_","variableDB_","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","defvars","devVarList","Variables","allDeveloperVariables","getName","DEVELOPER_VARIABLE_TYPE","variables","allUsedVarModels","getId","VARIABLE_CATEGORY_NAME","finish","definitions","scrubNakedValue","line","quote_","string","replace","multiline_quote_","lines","split","map","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","prefixLines","nextBlock","nextConnection","targetBlock","nextCode","blockToCode","getAdjusted","atId","opt_delta","opt_negate","opt_order","delta","order","options","oneBasedIndex","at","innerOrder","defaultAtIndex","valueToCode","isNumber","Number","Math","floor","getFieldValue","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","red","green","blue","c1","c2","ratio","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","INDENT","getInput","OPERATORS","operator","functionNames","argument0","argument1","defaultArgument","value_if","value_then","value_else","repeats","getField","String","branch","addLoopTrap","loopVar","getDistinctName","endVar","match","until","variable0","increment","up","step","abs","startVar","incVar","listVar","indexVar","xfix","loop","Constants","Loops","CONTROL_FLOW_IN_LOOP_CHECK_MIXIN","getSurroundLoop","suppressPrefixSuffix","Error","tuple","inputList","filter","input","type","forEach","arg","CONSTANTS","number_to_check","dropdown_property","divisor","varName","list","func","argument2","funcName","PROCEDURE_CATEGORY_NAME","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","getVars","condition","hasReturnValue_","indexOf","text","forceString_","strRegExp","test","itemCount_","element","element0","element1","elements","Array","substring","where","textOrder","getIndex_","stringName","opt_at","where1","where2","at1","at2","wherePascalCase","msg","toNumber","sub","from","to","constants","appendDummyInput","appendField","setHelpUrl","LISTS_CREATE_WITH_HELPURL","setColour","appendAddSubNamed","updateShape_","appendValueInput","setCheck","setInputsInline","setOutput","setTooltip","LISTS_CREATE_WITH_TOOLTIP","setPreviousStatement","setNextStatement","number_id","number_amount","number_price","value_number","value_name","value_fetch","variable_variable","NAME_TYPE","constant","find","item","desc","ADD_ARGUMENTS_MUTATOR_MIXIN","mutationToDom","container","xml","createElement","setAttribute","domToMutation","xmlElement","createShape_","getAttribute","inputsLenght","inputExists","inputs","lastInputNotEmpty","connection","lastButOneInputNotEmpty","removeInput","ADD_ARGUMENTS_MUTATOR_EXTENSION","setOnChange","registerMutator","getMatchingConnection","otherBlock","conn","connections","getConnections_","otherConnections","safeName_","renameVar","defaultValue","callback","Swal","fire","title","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","allowOutsideClick","isLoading","then","Msg","media","grid","toolbox","mounted","$refs","registerToolboxCategoryCallback","methods","coloursFlyoutCallback","xmlList","blockText","toolbox_","refreshSelection","tab","showCode","xmlDom","xmlText","console","log","getArguments","arr","express","expression","arguments","component","Vue","config","productionTip","ignoredElements","render","h","App","$mount"],"mappings":"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","file":"js/app.beba401d.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('div',{staticClass:\"addconst\"},[_c('input',{ref:\"const_name\",attrs:{\"type\":\"text\",\"name\":\"const_name\",\"placeholder\":\"Название\"}}),_c('input',{ref:\"const_short_name\",attrs:{\"type\":\"text\",\"name\":\"const_short_name\",\"placeholder\":\"Обозначение в алгоритме\"}}),_c('button',{on:{\"click\":function($event){return _vm.updateConsts()}}},[_vm._v(\"Добавить константу\")])]),_c('div',{staticClass:\"tabs\"},[_c('div',{staticClass:\"tabs__header\"},[_c('ul',{staticClass:\"tabs__buttons\"},[_c('li',{class:{ tabs__button: true, active: _vm.openedTab === 1 },on:{\"click\":function($event){return _vm.openTab(1)}}},[_vm._v(\"ПРОГРАММНЫЙ КОД\")]),_c('li',{class:{ tabs__button: true, active: _vm.openedTab === 2 },on:{\"click\":function($event){return _vm.openTab(2)}}},[_vm._v(\"ВИЗУАЛЬНЫЙ КОД\")])])]),_c('div',{staticClass:\"tabs__body\"},[_c('div',{staticClass:\"tabs__item\",style:({ opacity: _vm.openedTab === 1 ? '1' : '0', visibility: _vm.openedTab === 1 ? 'visible' : 'hidden' })},[_c('textarea',{ref:\"code\",domProps:{\"innerHTML\":_vm._s(_vm.code)}})]),_c('div',{staticClass:\"tabs__item\",style:({ opacity: _vm.openedTab === 2 ? '1' : '0', visibility: _vm.openedTab === 2 ? 'visible' : 'hidden' })},[_c('div',{ref:\"blocklyDiv\",staticClass:\"blocklyDiv\",attrs:{\"id\":\"blockly\"}})])])]),_c('button',{on:{\"click\":function($event){return _vm.fromXML()}}},[_vm._v(\"Сгененрировать блоки\")]),_c('button',{on:{\"click\":function($event){return _vm.toXML()}}},[_vm._v(\"Экспорт в xml\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating CustomLng for blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n\nimport Blockly from 'blockly';\n\n/**\n * CustomLng code generator.\n * @type {!Blockly.Generator}\n */\nBlockly.CustomLng = new Blockly.Generator('CustomLng');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n * @private\n */\nBlockly.CustomLng.addReservedWords(\n    // https://developer.mozilla.org/en-US/docs/Web/CustomLng/Reference/Lexical_grammar#Keywords\n    'break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,' +\n    'enum,' +\n    'implements,interface,let,package,private,protected,public,static,' +\n    'await,' +\n    'null,true,false,' +\n    // Magic variable.\n    'arguments,' +\n    // Everything in the current environment (835 items in Chrome, 104 in Node).\n    Object.getOwnPropertyNames(Blockly.utils.global).join(','));\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/CustomLng/Reference/Operators/Operator_Precedence\n */\nBlockly.CustomLng.ORDER_ATOMIC = 0;           // 0 \"\" ...\nBlockly.CustomLng.ORDER_NEW = 1.1;            // new\nBlockly.CustomLng.ORDER_MEMBER = 1.2;         // . []\nBlockly.CustomLng.ORDER_FUNCTION_CALL = 2;    // ()\nBlockly.CustomLng.ORDER_INCREMENT = 3;        // ++\nBlockly.CustomLng.ORDER_DECREMENT = 3;        // --\nBlockly.CustomLng.ORDER_BITWISE_NOT = 4.1;    // ~\nBlockly.CustomLng.ORDER_UNARY_PLUS = 4.2;     // +\nBlockly.CustomLng.ORDER_UNARY_NEGATION = 4.3; // -\nBlockly.CustomLng.ORDER_LOGICAL_NOT = 4.4;    // !\nBlockly.CustomLng.ORDER_TYPEOF = 4.5;         // typeof\nBlockly.CustomLng.ORDER_VOID = 4.6;           // void\nBlockly.CustomLng.ORDER_DELETE = 4.7;         // delete\nBlockly.CustomLng.ORDER_AWAIT = 4.8;          // await\nBlockly.CustomLng.ORDER_EXPONENTIATION = 5.0; // **\nBlockly.CustomLng.ORDER_MULTIPLICATION = 5.1; // *\nBlockly.CustomLng.ORDER_DIVISION = 5.2;       // /\nBlockly.CustomLng.ORDER_MODULUS = 5.3;        // %\nBlockly.CustomLng.ORDER_SUBTRACTION = 6.1;    // -\nBlockly.CustomLng.ORDER_ADDITION = 6.2;       // +\nBlockly.CustomLng.ORDER_BITWISE_SHIFT = 7;    // << >> >>>\nBlockly.CustomLng.ORDER_RELATIONAL = 8;       // < <= > >=\nBlockly.CustomLng.ORDER_IN = 8;               // in\nBlockly.CustomLng.ORDER_INSTANCEOF = 8;       // instanceof\nBlockly.CustomLng.ORDER_EQUALITY = 9;         // == != === !==\nBlockly.CustomLng.ORDER_BITWISE_AND = 10;     // &\nBlockly.CustomLng.ORDER_BITWISE_XOR = 11;     // ^\nBlockly.CustomLng.ORDER_BITWISE_OR = 12;      // |\nBlockly.CustomLng.ORDER_LOGICAL_AND = 13;     // &&\nBlockly.CustomLng.ORDER_LOGICAL_OR = 14;      // ||\nBlockly.CustomLng.ORDER_CONDITIONAL = 15;     // ?:\nBlockly.CustomLng.ORDER_ASSIGNMENT = 16;      // = += -= **= *= /= %= <<= >>= ...\nBlockly.CustomLng.ORDER_YIELD = 17;           // yield\nBlockly.CustomLng.ORDER_COMMA = 18;           // ,\nBlockly.CustomLng.ORDER_NONE = 99;            // (...)\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array.<!Array.<number>>}\n */\nBlockly.CustomLng.ORDER_OVERRIDES = [\n  // (foo()).bar -> foo().bar\n  // (foo())[0] -> foo()[0]\n  [Blockly.CustomLng.ORDER_FUNCTION_CALL, Blockly.CustomLng.ORDER_MEMBER],\n  // (foo())() -> foo()()\n  [Blockly.CustomLng.ORDER_FUNCTION_CALL, Blockly.CustomLng.ORDER_FUNCTION_CALL],\n  // (foo.bar).baz -> foo.bar.baz\n  // (foo.bar)[0] -> foo.bar[0]\n  // (foo[0]).bar -> foo[0].bar\n  // (foo[0])[1] -> foo[0][1]\n  [Blockly.CustomLng.ORDER_MEMBER, Blockly.CustomLng.ORDER_MEMBER],\n  // (foo.bar)() -> foo.bar()\n  // (foo[0])() -> foo[0]()\n  [Blockly.CustomLng.ORDER_MEMBER, Blockly.CustomLng.ORDER_FUNCTION_CALL],\n\n  // !(!foo) -> !!foo\n  [Blockly.CustomLng.ORDER_LOGICAL_NOT, Blockly.CustomLng.ORDER_LOGICAL_NOT],\n  // a * (b * c) -> a * b * c\n  [Blockly.CustomLng.ORDER_MULTIPLICATION, Blockly.CustomLng.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [Blockly.CustomLng.ORDER_ADDITION, Blockly.CustomLng.ORDER_ADDITION],\n  // a && (b && c) -> a && b && c\n  [Blockly.CustomLng.ORDER_LOGICAL_AND, Blockly.CustomLng.ORDER_LOGICAL_AND],\n  // a || (b || c) -> a || b || c\n  [Blockly.CustomLng.ORDER_LOGICAL_OR, Blockly.CustomLng.ORDER_LOGICAL_OR]\n];\n\n/**\n * Whether the init method has been called.\n * @type {?boolean}\n */\nBlockly.CustomLng.isInitialized = false;\n\n/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.CustomLng.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.CustomLng.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.CustomLng.functionNames_ = Object.create(null);\n\n  if (!Blockly.CustomLng.variableDB_) {\n    Blockly.CustomLng.variableDB_ =\n        new Blockly.Names(Blockly.CustomLng.RESERVED_WORDS_);\n  } else {\n    Blockly.CustomLng.variableDB_.reset();\n  }\n\n  Blockly.CustomLng.variableDB_.setVariableMap(workspace.getVariableMap());\n\n  var defvars = [];\n  // Add developer variables (not created or named by the user).\n  var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    defvars.push(Blockly.CustomLng.variableDB_.getName(devVarList[i],\n        Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n  }\n\n  // Add user variables, but only ones that are being used.\n  var variables = Blockly.Variables.allUsedVarModels(workspace);\n  for (let i = 0; i < variables.length; i++) {\n    defvars.push(Blockly.CustomLng.variableDB_.getName(variables[i].getId(),\n        Blockly.VARIABLE_CATEGORY_NAME));\n  }\n\n  this.isInitialized = true;\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nBlockly.CustomLng.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  var definitions = [];\n  for (var name in Blockly.CustomLng.definitions_) {\n    definitions.push(Blockly.CustomLng.definitions_[name]);\n  }\n  // Clean up temporary data.\n  delete Blockly.CustomLng.definitions_;\n  delete Blockly.CustomLng.functionNames_;\n  Blockly.CustomLng.variableDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nBlockly.CustomLng.scrubNakedValue = function(line) {\n  return line + '\\n';\n};\n\n/**\n * Encode a string as a properly escaped CustomLng string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} CustomLng string.\n * @protected\n */\nBlockly.CustomLng.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline CustomLng string, complete\n * with quotes.\n * @param {string} string Text to encode.\n * @return {string} CustomLng string.\n * @protected\n */\nBlockly.CustomLng.multiline_quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  var lines = string.split(/\\n/g).map(Blockly.CustomLng.quote_);\n  return lines.join(' + \\'\\\\n\\' +\\n');\n};\n\n/**\n * Common tasks for generating CustomLng from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Blockly.Block} block The current block.\n * @param {string} code The CustomLng code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} CustomLng code with comments and subsequent blocks added.\n * @protected\n */\nBlockly.CustomLng.scrub_ = function(block, code, opt_thisOnly) {\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    if (comment) {\n      comment = Blockly.utils.string.wrap(comment,\n          Blockly.CustomLng.COMMENT_WRAP - 3);\n      commentCode += Blockly.CustomLng.prefixLines(comment + '\\n', '// ');\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n  \n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = opt_thisOnly ? '' : Blockly.CustomLng.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Blockly.Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nBlockly.CustomLng.getAdjusted = function(block, atId, opt_delta, opt_negate,\n    opt_order) {\n  var delta = opt_delta || 0;\n  var order = opt_order || Blockly.CustomLng.ORDER_NONE;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  var defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n  let at;\n  if (delta > 0) {\n    at = Blockly.CustomLng.valueToCode(block, atId,\n        Blockly.CustomLng.ORDER_ADDITION) || defaultAtIndex;\n  } else if (delta < 0) {\n    at = Blockly.CustomLng.valueToCode(block, atId,\n        Blockly.CustomLng.ORDER_SUBTRACTION) || defaultAtIndex;\n  } else if (opt_negate) {\n    at = Blockly.CustomLng.valueToCode(block, atId,\n        Blockly.CustomLng.ORDER_UNARY_NEGATION) || defaultAtIndex;\n  } else {\n    at = Blockly.CustomLng.valueToCode(block, atId, order) ||\n        defaultAtIndex;\n  }\n\n  if (Blockly.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = Number(at) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    let innerOrder;\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n      innerOrder = Blockly.CustomLng.ORDER_ADDITION;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n      innerOrder = Blockly.CustomLng.ORDER_SUBTRACTION;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n      innerOrder = Blockly.CustomLng.ORDER_UNARY_NEGATION;\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating CustomLng for colour blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\nimport Blockly from 'blockly';\n\n\nBlockly.CustomLng['colour_picker'] = function(block) {\n  // Colour picker.\n  var code = Blockly.CustomLng.quote_(block.getFieldValue('COLOUR'));\n  return [code, Blockly.CustomLng.ORDER_ATOMIC];\n};\n\nBlockly.CustomLng['colour_random'] = function() {\n  // Generate a random colour.\n  var functionName = Blockly.CustomLng.provideFunction_(\n      'colourRandom',\n      ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ + '() {',\n        '  var num = Math.floor(Math.random() * Math.pow(2, 24));',\n        '  return \\'#\\' + (\\'00000\\' + num.toString(16)).substr(-6);',\n        '}']);\n  var code = functionName + '()';\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['colour_rgb'] = function(block) {\n  // Compose a colour from RGB components expressed as percentages.\n  var red = Blockly.CustomLng.valueToCode(block, 'RED',\n      Blockly.CustomLng.ORDER_COMMA) || 0;\n  var green = Blockly.CustomLng.valueToCode(block, 'GREEN',\n      Blockly.CustomLng.ORDER_COMMA) || 0;\n  var blue = Blockly.CustomLng.valueToCode(block, 'BLUE',\n      Blockly.CustomLng.ORDER_COMMA) || 0;\n  var functionName = Blockly.CustomLng.provideFunction_(\n      'colourRgb',\n      ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n          '(r, g, b) {',\n       '  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;',\n       '  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;',\n       '  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;',\n       '  r = (\\'0\\' + (Math.round(r) || 0).toString(16)).slice(-2);',\n       '  g = (\\'0\\' + (Math.round(g) || 0).toString(16)).slice(-2);',\n       '  b = (\\'0\\' + (Math.round(b) || 0).toString(16)).slice(-2);',\n       '  return \\'#\\' + r + g + b;',\n       '}']);\n  var code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['colour_blend'] = function(block) {\n  // Blend two colours together.\n  var c1 = Blockly.CustomLng.valueToCode(block, 'COLOUR1',\n      Blockly.CustomLng.ORDER_COMMA) || '\\'#000000\\'';\n  var c2 = Blockly.CustomLng.valueToCode(block, 'COLOUR2',\n      Blockly.CustomLng.ORDER_COMMA) || '\\'#000000\\'';\n  var ratio = Blockly.CustomLng.valueToCode(block, 'RATIO',\n      Blockly.CustomLng.ORDER_COMMA) || 0.5;\n  var functionName = Blockly.CustomLng.provideFunction_(\n      'colourBlend',\n      ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n          '(c1, c2, ratio) {',\n       '  ratio = Math.max(Math.min(Number(ratio), 1), 0);',\n       '  var r1 = parseInt(c1.substring(1, 3), 16);',\n       '  var g1 = parseInt(c1.substring(3, 5), 16);',\n       '  var b1 = parseInt(c1.substring(5, 7), 16);',\n       '  var r2 = parseInt(c2.substring(1, 3), 16);',\n       '  var g2 = parseInt(c2.substring(3, 5), 16);',\n       '  var b2 = parseInt(c2.substring(5, 7), 16);',\n       '  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);',\n       '  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);',\n       '  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);',\n       '  r = (\\'0\\' + (r || 0).toString(16)).slice(-2);',\n       '  g = (\\'0\\' + (g || 0).toString(16)).slice(-2);',\n       '  b = (\\'0\\' + (b || 0).toString(16)).slice(-2);',\n       '  return \\'#\\' + r + g + b;',\n       '}']);\n  var code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating CustomLng for logic blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\nimport Blockly from 'blockly';\n\nBlockly.CustomLng['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  if (Blockly.CustomLng.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_PREFIX,\n        block);\n  }\n  do {\n    conditionCode = Blockly.CustomLng.valueToCode(block, 'IF' + n,\n        Blockly.CustomLng.ORDER_NONE) || 'false';\n    branchCode = Blockly.CustomLng.statementToCode(block, 'DO' + n);\n    if (Blockly.CustomLng.STATEMENT_SUFFIX) {\n      branchCode = Blockly.CustomLng.prefixLines(\n          Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_SUFFIX,\n          block), Blockly.CustomLng.INDENT) + branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') +\n        'if (' + conditionCode + ') {\\n' + branchCode + '}';\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || Blockly.CustomLng.STATEMENT_SUFFIX) {\n    branchCode = Blockly.CustomLng.statementToCode(block, 'ELSE');\n    if (Blockly.CustomLng.STATEMENT_SUFFIX) {\n      branchCode = Blockly.CustomLng.prefixLines(\n          Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_SUFFIX,\n          block), Blockly.CustomLng.INDENT) + branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nBlockly.CustomLng['controls_ifelse'] = Blockly.CustomLng['controls_if'];\n\nBlockly.CustomLng['logic_compare'] = function(block) {\n  // Comparison operator.\n  var OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>='\n  };\n  var operator = OPERATORS[block.getFieldValue('OP')];\n  var order = (operator == '==' || operator == '!=') ?\n      Blockly.CustomLng.ORDER_ADDITION : Blockly.CustomLng.ORDER_ADDITION;\n  \n  const functionNames = {\n    '==': 'РАВНО',\n    '!=': 'НЕ_РАВНО',\n    '<': 'МЕНЬШЕ',\n    '<=': 'МЕНЬШЕ_РАВНО',\n    '>': 'БОЛЬШЕ',\n    '>=': 'БОЛЬШЕ_РАВНО'\n  }\n\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.CustomLng.valueToCode(block, 'B', order) || '0';\n\n  const code = `${functionNames[operator] || 'НЕИЗВ'}(${argument0}, ${argument1})`;\n\n  return [code, order];\n};\n\nBlockly.CustomLng['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  var operator = (block.getFieldValue('OP') == 'AND') ? '&&' : '||';\n  var order = (operator == '&&') ? Blockly.CustomLng.ORDER_LOGICAL_AND :\n      Blockly.CustomLng.ORDER_LOGICAL_OR;\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'A', order);\n  var argument1 = Blockly.CustomLng.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    var defaultArgument = (operator == '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = `${operator == '&&' ? 'И'  : 'ИЛИ' }(${argument0}, ${argument1})`;\n  return [code, order];\n};\n\nBlockly.CustomLng['logic_negate'] = function(block) {\n  // Negation.\n  var order = Blockly.CustomLng.ORDER_LOGICAL_NOT;\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'BOOL', order) ||\n      'true';\n  var code = '!' + argument0;\n  return [code, order];\n};\n\nBlockly.CustomLng['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';\n  return [code, Blockly.CustomLng.ORDER_ATOMIC];\n};\n\nBlockly.CustomLng['logic_null'] = function() {\n  // Null data type.\n  return ['null', Blockly.CustomLng.ORDER_ATOMIC];\n};\n\nBlockly.CustomLng['logic_ternary'] = function(block) {\n  // Ternary operator.\n  var value_if = Blockly.CustomLng.valueToCode(block, 'IF',\n      Blockly.CustomLng.ORDER_CONDITIONAL) || 'false';\n  var value_then = Blockly.CustomLng.valueToCode(block, 'THEN',\n      Blockly.CustomLng.ORDER_CONDITIONAL) || 'null';\n  var value_else = Blockly.CustomLng.valueToCode(block, 'ELSE',\n      Blockly.CustomLng.ORDER_CONDITIONAL) || 'null';\n  var code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Blockly.CustomLng.ORDER_CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating CustomLng for loop blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\nimport Blockly from 'blockly';\n\n\nBlockly.CustomLng['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = Blockly.CustomLng.valueToCode(block, 'TIMES',\n        Blockly.CustomLng.ORDER_ASSIGNMENT) || '0';\n  }\n  var branch = Blockly.CustomLng.statementToCode(block, 'DO');\n  branch = Blockly.CustomLng.addLoopTrap(branch, block);\n  var code = '';\n  var loopVar = Blockly.CustomLng.variableDB_.getDistinctName(\n      'count', Blockly.VARIABLE_CATEGORY_NAME);\n  var endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\n    endVar = Blockly.CustomLng.variableDB_.getDistinctName(\n        'repeat_end', Blockly.VARIABLE_CATEGORY_NAME);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (var ' + loopVar + ' = 0; ' +\n      loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' +\n      branch + '}\\n';\n  return code;\n};\n\nBlockly.CustomLng['controls_repeat'] =\n    Blockly.CustomLng['controls_repeat_ext'];\n\nBlockly.CustomLng['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  var until = block.getFieldValue('MODE') == 'UNTIL';\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'BOOL',\n      until ? Blockly.CustomLng.ORDER_LOGICAL_NOT :\n      Blockly.CustomLng.ORDER_NONE) || 'false';\n  var branch = Blockly.CustomLng.statementToCode(block, 'DO');\n  branch = Blockly.CustomLng.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nBlockly.CustomLng['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.CustomLng.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'FROM',\n      Blockly.CustomLng.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.CustomLng.valueToCode(block, 'TO',\n      Blockly.CustomLng.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.CustomLng.valueToCode(block, 'BY',\n      Blockly.CustomLng.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.CustomLng.statementToCode(block, 'DO');\n  branch = Blockly.CustomLng.addLoopTrap(branch, block);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(Number(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.CustomLng.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.VARIABLE_CATEGORY_NAME);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      endVar = Blockly.CustomLng.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.VARIABLE_CATEGORY_NAME);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.CustomLng.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.VARIABLE_CATEGORY_NAME);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.CustomLng.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.CustomLng['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.CustomLng.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'LIST',\n      Blockly.CustomLng.ORDER_ASSIGNMENT) || '[]';\n  var branch = Blockly.CustomLng.statementToCode(block, 'DO');\n  branch = Blockly.CustomLng.addLoopTrap(branch, block);\n  var code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  var listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = Blockly.CustomLng.variableDB_.getDistinctName(\n        variable0 + '_list', Blockly.VARIABLE_CATEGORY_NAME);\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  var indexVar = Blockly.CustomLng.variableDB_.getDistinctName(\n      variable0 + '_index', Blockly.VARIABLE_CATEGORY_NAME);\n  branch = Blockly.CustomLng.INDENT + variable0 + ' = ' +\n      listVar + '[' + indexVar + '];\\n' + branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nBlockly.CustomLng['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  var xfix = '';\n  if (Blockly.CustomLng.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_PREFIX,\n        block);\n  }\n  if (Blockly.CustomLng.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_SUFFIX,\n        block);\n  }\n  if (Blockly.CustomLng.STATEMENT_PREFIX) {\n    var loop = Blockly.Constants.Loops\n        .CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(block);\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_PREFIX,\n          loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating CustomLng for math blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\nimport Blockly from 'blockly';\n\n\nBlockly.CustomLng['math_number'] = function(block) {\n  // Numeric value.\n  var code = Number(block.getFieldValue('NUM'));\n  var order = code >= 0 ? Blockly.CustomLng.ORDER_ATOMIC :\n              Blockly.CustomLng.ORDER_UNARY_NEGATION;\n  return [`'${code}'`, order];\n};\n\nBlockly.CustomLng['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  var OPERATORS = {\n    'ADD': [' + ', Blockly.CustomLng.ORDER_ADDITION],\n    'MINUS': [' - ', Blockly.CustomLng.ORDER_SUBTRACTION],\n    'MULTIPLY': [' * ', Blockly.CustomLng.ORDER_MULTIPLICATION],\n    'DIVIDE': [' / ', Blockly.CustomLng.ORDER_DIVISION],\n    'POWER': [null, Blockly.CustomLng.ORDER_COMMA]  // Handle power separately.\n  };\n  var tuple = OPERATORS[block.getFieldValue('OP')];\n  var operator = tuple[0];\n  var order = tuple[1];\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.CustomLng.valueToCode(block, 'B', order) || '0';\n  var code;\n  // Power in CustomLng requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n  }\n\n  const functionNames = {\n    ' + ': 'СУММА',\n    ' - ': 'РАЗН',\n    ' * ': 'ПРОИЗВЕД',\n    ' / ': 'ЧАСТН'\n  }\n\n  code = `${functionNames[operator] || 'НЕИЗВ'}(${argument0}, ${argument1})`;\n  return [code, order];\n};\n\nBlockly.CustomLng['custom_arithmetic'] = function(block) {\n  const functionNames = {\n    'ADD': 'СУММА',\n    'MINUS': 'РАЗН',\n    'MULTIPLY': 'ПРОИЗВЕД',\n    'DIVIDE': 'ЧАСТН'\n  };\n\n  const functionName = functionNames[block.getFieldValue('OP')];\n  const order = Blockly.CustomLng.ORDER_ADDITION;\n\n  let code = `${functionName || 'НЕИЗВ'}(`;\n\n  const inputList = block.inputList.filter((input) => input.type === 1);\n\n  inputList.forEach((input, i) => {\n    if(i < inputList.length - 1){\n      code += Blockly.CustomLng.valueToCode(block, input.name, order) || '0';\n      code += i === inputList.length - 2 ? '' : ', ';\n    }\n  });\n\n  code += `)`;\n  return [code, order];\n};\n\nBlockly.CustomLng['custom_logic_operation'] = function(block) {\n  const functionNames = {\n    'AND': 'И',\n    'OR': 'ИЛИ'\n  };\n\n  const functionName = functionNames[block.getFieldValue('OP')];\n  const order = Blockly.CustomLng.ORDER_ADDITION;\n\n  let code = `${functionName || 'НЕИЗВ'}(`;\n\n  const inputList = block.inputList.filter((input) => input.type === 1);\n\n  inputList.forEach((input, i) => {\n    if(i < inputList.length - 1){\n      code += Blockly.CustomLng.valueToCode(block, input.name, order) || 'ЛОЖЬ';\n      code += i === inputList.length - 2 ? '' : ', ';\n    }\n  });\n\n  code += `)`;\n  return [code, order];\n};\n\nBlockly.CustomLng['math_single'] = function(block) {\n  // Math operators with single operand.\n  var operator = block.getFieldValue('OP');\n  var code;\n  var arg;\n  if (operator == 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = Blockly.CustomLng.valueToCode(block, 'NUM',\n        Blockly.CustomLng.ORDER_UNARY_NEGATION) || '0';\n    if (arg[0] == '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Blockly.CustomLng.ORDER_UNARY_NEGATION];\n  }\n  if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {\n    arg = Blockly.CustomLng.valueToCode(block, 'NUM',\n        Blockly.CustomLng.ORDER_DIVISION) || '0';\n  } else {\n    arg = Blockly.CustomLng.valueToCode(block, 'NUM',\n        Blockly.CustomLng.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Blockly.CustomLng.ORDER_DIVISION];\n};\n\nBlockly.CustomLng['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  var CONSTANTS = {\n    'PI': ['Math.PI', Blockly.CustomLng.ORDER_MEMBER],\n    'E': ['Math.E', Blockly.CustomLng.ORDER_MEMBER],\n    'GOLDEN_RATIO':\n        ['(1 + Math.sqrt(5)) / 2', Blockly.CustomLng.ORDER_DIVISION],\n    'SQRT2': ['Math.SQRT2', Blockly.CustomLng.ORDER_MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', Blockly.CustomLng.ORDER_MEMBER],\n    'INFINITY': ['Infinity', Blockly.CustomLng.ORDER_ATOMIC]\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nBlockly.CustomLng['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  var number_to_check = Blockly.CustomLng.valueToCode(block, 'NUMBER_TO_CHECK',\n      Blockly.CustomLng.ORDER_MODULUS) || '0';\n  var dropdown_property = block.getFieldValue('PROPERTY');\n  var code;\n  if (dropdown_property == 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    var functionName = Blockly.CustomLng.provideFunction_(\n        'mathIsPrime',\n        ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ + '(n) {',\n         '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n         '  if (n == 2 || n == 3) {',\n         '    return true;',\n         '  }',\n         '  // False if n is NaN, negative, is 1, or not whole.',\n         '  // And false if n is divisible by 2 or 3.',\n         '  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 ||' +\n            ' n % 3 == 0) {',\n         '    return false;',\n         '  }',\n         '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n         '  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {',\n         '    if (n % (x - 1) == 0 || n % (x + 1) == 0) {',\n         '      return false;',\n         '    }',\n         '  }',\n         '  return true;',\n         '}']);\n    code = functionName + '(' + number_to_check + ')';\n    return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n  }\n  switch (dropdown_property) {\n    case 'EVEN':\n      code = number_to_check + ' % 2 == 0';\n      break;\n    case 'ODD':\n      code = number_to_check + ' % 2 == 1';\n      break;\n    case 'WHOLE':\n      code = number_to_check + ' % 1 == 0';\n      break;\n    case 'POSITIVE':\n      code = number_to_check + ' > 0';\n      break;\n    case 'NEGATIVE':\n      code = number_to_check + ' < 0';\n      break;\n    case 'DIVISIBLE_BY':\n      var divisor = Blockly.CustomLng.valueToCode(block, 'DIVISOR',\n          Blockly.CustomLng.ORDER_MODULUS) || '0';\n      code = number_to_check + ' % ' + divisor + ' == 0';\n      break;\n  }\n  return [code, Blockly.CustomLng.ORDER_EQUALITY];\n};\n\nBlockly.CustomLng['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'DELTA',\n      Blockly.CustomLng.ORDER_ADDITION) || '0';\n  var varName = Blockly.CustomLng.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  return varName + ' = (typeof ' + varName + ' == \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nBlockly.CustomLng['math_round'] = Blockly.CustomLng['math_single'];\n// Trigonometry functions have a single operand.\nBlockly.CustomLng['math_trig'] = Blockly.CustomLng['math_single'];\n\nBlockly.CustomLng['math_on_list'] = function(block) {\n  // Math functions for lists.\n  var func = block.getFieldValue('OP');\n  var list, code;\n  let functionName;\n  switch (func) {\n    case 'SUM':\n      list = Blockly.CustomLng.valueToCode(block, 'LIST',\n          Blockly.CustomLng.ORDER_MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;})';\n      break;\n    case 'MIN':\n      list = Blockly.CustomLng.valueToCode(block, 'LIST',\n          Blockly.CustomLng.ORDER_COMMA) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = Blockly.CustomLng.valueToCode(block, 'LIST',\n          Blockly.CustomLng.ORDER_COMMA) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE':\n      // mathMean([null,null,1,3]) == 2.0.\n      functionName = Blockly.CustomLng.provideFunction_(\n          'mathMean',\n          ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n              '(myList) {',\n            '  return myList.reduce(function(x, y) {return x + y;}) / ' +\n                  'myList.length;',\n            '}']);\n      list = Blockly.CustomLng.valueToCode(block, 'LIST',\n          Blockly.CustomLng.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MEDIAN':\n      // mathMedian([null,null,1,3]) == 2.0.\n      functionName = Blockly.CustomLng.provideFunction_(\n          'mathMedian',\n          ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n              '(myList) {',\n            '  var localList = myList.filter(function (x) ' +\n              '{return typeof x == \\'number\\';});',\n            '  if (!localList.length) return null;',\n            '  localList.sort(function(a, b) {return b - a;});',\n            '  if (localList.length % 2 == 0) {',\n            '    return (localList[localList.length / 2 - 1] + ' +\n              'localList[localList.length / 2]) / 2;',\n            '  } else {',\n            '    return localList[(localList.length - 1) / 2];',\n            '  }',\n            '}']);\n      list = Blockly.CustomLng.valueToCode(block, 'LIST',\n          Blockly.CustomLng.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MODE':\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      functionName = Blockly.CustomLng.provideFunction_(\n          'mathModes',\n          ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n              '(values) {',\n            '  var modes = [];',\n            '  var counts = [];',\n            '  var maxCount = 0;',\n            '  for (var i = 0; i < values.length; i++) {',\n            '    var value = values[i];',\n            '    var found = false;',\n            '    var thisCount;',\n            '    for (var j = 0; j < counts.length; j++) {',\n            '      if (counts[j][0] === value) {',\n            '        thisCount = ++counts[j][1];',\n            '        found = true;',\n            '        break;',\n            '      }',\n            '    }',\n            '    if (!found) {',\n            '      counts.push([value, 1]);',\n            '      thisCount = 1;',\n            '    }',\n            '    maxCount = Math.max(thisCount, maxCount);',\n            '  }',\n            '  for (var j = 0; j < counts.length; j++) {',\n            '    if (counts[j][1] == maxCount) {',\n            '        modes.push(counts[j][0]);',\n            '    }',\n            '  }',\n            '  return modes;',\n            '}']);\n      list = Blockly.CustomLng.valueToCode(block, 'LIST',\n          Blockly.CustomLng.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'STD_DEV':\n      functionName = Blockly.CustomLng.provideFunction_(\n          'mathStandardDeviation',\n          ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n              '(numbers) {',\n            '  var n = numbers.length;',\n            '  if (!n) return null;',\n            '  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;',\n            '  var variance = 0;',\n            '  for (var j = 0; j < n; j++) {',\n            '    variance += Math.pow(numbers[j] - mean, 2);',\n            '  }',\n            '  variance = variance / n;',\n            '  return Math.sqrt(variance);',\n            '}']);\n      list = Blockly.CustomLng.valueToCode(block, 'LIST',\n          Blockly.CustomLng.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'RANDOM':\n      functionName = Blockly.CustomLng.provideFunction_(\n          'mathRandomList',\n          ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n              '(list) {',\n            '  var x = Math.floor(Math.random() * list.length);',\n            '  return list[x];',\n            '}']);\n      list = Blockly.CustomLng.valueToCode(block, 'LIST',\n          Blockly.CustomLng.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['math_modulo'] = function(block) {\n  // Remainder computation.\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'DIVIDEND',\n      Blockly.CustomLng.ORDER_MODULUS) || '0';\n  var argument1 = Blockly.CustomLng.valueToCode(block, 'DIVISOR',\n      Blockly.CustomLng.ORDER_MODULUS) || '0';\n  var code = argument0 + ' % ' + argument1;\n  return [code, Blockly.CustomLng.ORDER_MODULUS];\n};\n\nBlockly.CustomLng['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'VALUE',\n      Blockly.CustomLng.ORDER_COMMA) || '0';\n  var argument1 = Blockly.CustomLng.valueToCode(block, 'LOW',\n      Blockly.CustomLng.ORDER_COMMA) || '0';\n  var argument2 = Blockly.CustomLng.valueToCode(block, 'HIGH',\n      Blockly.CustomLng.ORDER_COMMA) || 'Infinity';\n  var code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'FROM',\n      Blockly.CustomLng.ORDER_COMMA) || '0';\n  var argument1 = Blockly.CustomLng.valueToCode(block, 'TO',\n      Blockly.CustomLng.ORDER_COMMA) || '0';\n  var functionName = Blockly.CustomLng.provideFunction_(\n      'mathRandomInt',\n      ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n          '(a, b) {',\n       '  if (a > b) {',\n       '    // Swap a and b to ensure a is smaller.',\n       '    var c = a;',\n       '    a = b;',\n       '    b = c;',\n       '  }',\n       '  return Math.floor(Math.random() * (b - a + 1) + a);',\n       '}']);\n  var code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['math_random_float'] = function() {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'X',\n      Blockly.CustomLng.ORDER_COMMA) || '0';\n  var argument1 = Blockly.CustomLng.valueToCode(block, 'Y',\n      Blockly.CustomLng.ORDER_COMMA) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n      Blockly.CustomLng.ORDER_DIVISION];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating CustomLng for procedure blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\nimport Blockly from 'blockly';\n\n\nBlockly.CustomLng['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  var funcName = Blockly.CustomLng.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var xfix1 = '';\n  if (Blockly.CustomLng.STATEMENT_PREFIX) {\n    xfix1 += Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_PREFIX,\n        block);\n  }\n  if (Blockly.CustomLng.STATEMENT_SUFFIX) {\n    xfix1 += Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_SUFFIX,\n        block);\n  }\n  if (xfix1) {\n    xfix1 = Blockly.CustomLng.prefixLines(xfix1, Blockly.CustomLng.INDENT);\n  }\n  var loopTrap = '';\n  if (Blockly.CustomLng.INFINITE_LOOP_TRAP) {\n    loopTrap = Blockly.CustomLng.prefixLines(\n        Blockly.CustomLng.injectId(Blockly.CustomLng.INFINITE_LOOP_TRAP,\n        block), Blockly.CustomLng.INDENT);\n  }\n  var branch = Blockly.CustomLng.statementToCode(block, 'STACK');\n  var returnValue = Blockly.CustomLng.valueToCode(block, 'RETURN',\n      Blockly.CustomLng.ORDER_NONE) || '';\n  var xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = Blockly.CustomLng.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.CustomLng.variableDB_.getName(variables[i],\n        Blockly.VARIABLE_CATEGORY_NAME);\n  }\n  var code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' +\n      xfix1 + loopTrap + branch + xfix2 + returnValue + '}';\n  code = Blockly.CustomLng.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  Blockly.CustomLng.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.CustomLng['procedures_defnoreturn'] =\n    Blockly.CustomLng['procedures_defreturn'];\n\nBlockly.CustomLng['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.CustomLng.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.CustomLng.valueToCode(block, 'ARG' + i,\n        Blockly.CustomLng.ORDER_COMMA) || 'null';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  var tuple = Blockly.CustomLng['procedures_callreturn'](block);\n  return tuple[0] + ';\\n';\n};\n\nBlockly.CustomLng['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.CustomLng.valueToCode(block, 'CONDITION',\n      Blockly.CustomLng.ORDER_NONE) || 'false';\n  var code = 'if (' + condition + ') {\\n';\n  if (Blockly.CustomLng.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += Blockly.CustomLng.prefixLines(\n        Blockly.CustomLng.injectId(Blockly.CustomLng.STATEMENT_SUFFIX, block),\n        Blockly.CustomLng.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    var value = Blockly.CustomLng.valueToCode(block, 'VALUE',\n        Blockly.CustomLng.ORDER_NONE) || 'null';\n    code += Blockly.CustomLng.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += Blockly.CustomLng.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating CustomLng for text blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\nimport Blockly from 'blockly';\n\n\nBlockly.CustomLng['text'] = function(block) {\n  // Text value.\n  var code = Blockly.CustomLng.quote_(block.getFieldValue('TEXT'));\n  return [code, Blockly.CustomLng.ORDER_ATOMIC];\n};\n\nBlockly.CustomLng['text_multiline'] = function(block) {\n  // Text value.\n  var code = Blockly.CustomLng.multiline_quote_(block.getFieldValue('TEXT'));\n  if (code.indexOf('\\n') != -1) {\n      code = '(' + code + ')'\n  }\n  return [code, Blockly.CustomLng.ORDER_ATOMIC];\n};\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {string} Code evaluating to a string.\n * @private\n */\nBlockly.CustomLng.text.forceString_ = function(value) {\n  if (Blockly.CustomLng.text.forceString_.strRegExp.test(value)) {\n    return value;\n  }\n  return 'String(' + value + ')';\n};\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nBlockly.CustomLng.text.forceString_.strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\nBlockly.CustomLng['text_join'] = function(block) {\n  // Create a string made up of any number of elements of any type.\n  let code;\n  switch (block.itemCount_) {\n    case 0:\n      return ['\\'\\'', Blockly.CustomLng.ORDER_ATOMIC];\n    case 1:\n      var element = Blockly.CustomLng.valueToCode(block, 'ADD0',\n          Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n      code = Blockly.CustomLng.text.forceString_(element);\n      return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n    case 2:\n      var element0 = Blockly.CustomLng.valueToCode(block, 'ADD0',\n          Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n      var element1 = Blockly.CustomLng.valueToCode(block, 'ADD1',\n          Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n      code = Blockly.CustomLng.text.forceString_(element0) + ' + ' +\n          Blockly.CustomLng.text.forceString_(element1);\n      return [code, Blockly.CustomLng.ORDER_ADDITION];\n    default:\n      var elements = new Array(block.itemCount_);\n      for (var i = 0; i < block.itemCount_; i++) {\n        elements[i] = Blockly.CustomLng.valueToCode(block, 'ADD' + i,\n            Blockly.CustomLng.ORDER_COMMA) || '\\'\\'';\n      }\n      code = '[' + elements.join(',') + '].join(\\'\\')';\n      return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n  }\n};\n\nBlockly.CustomLng['text_append'] = function(block) {\n  // Append to a variable in place.\n  var varName = Blockly.CustomLng.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var value = Blockly.CustomLng.valueToCode(block, 'TEXT',\n      Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n  return varName + ' += ' + Blockly.CustomLng.text.forceString_(value) + ';\\n';\n};\n\nBlockly.CustomLng['text_length'] = function(block) {\n  // String or array length.\n  var text = Blockly.CustomLng.valueToCode(block, 'VALUE',\n      Blockly.CustomLng.ORDER_FUNCTION_CALL) || '\\'\\'';\n  return [text + '.length', Blockly.CustomLng.ORDER_MEMBER];\n};\n\nBlockly.CustomLng['text_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  var text = Blockly.CustomLng.valueToCode(block, 'VALUE',\n      Blockly.CustomLng.ORDER_MEMBER) || '\\'\\'';\n  return ['!' + text + '.length', Blockly.CustomLng.ORDER_LOGICAL_NOT];\n};\n\nBlockly.CustomLng['text_indexOf'] = function(block) {\n  // Search the text for a substring.\n  var operator = block.getFieldValue('END') == 'FIRST' ?\n      'indexOf' : 'lastIndexOf';\n  var substring = Blockly.CustomLng.valueToCode(block, 'FIND',\n      Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n  var text = Blockly.CustomLng.valueToCode(block, 'VALUE',\n      Blockly.CustomLng.ORDER_MEMBER) || '\\'\\'';\n  var code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Blockly.CustomLng.ORDER_ADDITION];\n  }\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['text_charAt'] = function(block) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var textOrder = (where == 'RANDOM') ? Blockly.CustomLng.ORDER_NONE :\n      Blockly.CustomLng.ORDER_MEMBER;\n  var text = Blockly.CustomLng.valueToCode(block, 'VALUE',\n      textOrder) || '\\'\\'';\n  let code, at;\n  switch (where) {\n    case 'FIRST':\n      code = text + '.charAt(0)';\n      return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n    case 'LAST':\n      code = text + '.slice(-1)';\n      return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n    case 'FROM_START':\n      at = Blockly.CustomLng.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      code = text + '.charAt(' + at + ')';\n      return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n    case 'FROM_END':\n      at = Blockly.CustomLng.getAdjusted(block, 'AT', 1, true);\n      code = text + '.slice(' + at + ').charAt(0)';\n      return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n    case 'RANDOM':\n      var functionName = Blockly.CustomLng.provideFunction_(\n          'textRandomLetter',\n          ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n              '(text) {',\n           '  var x = Math.floor(Math.random() * text.length);',\n           '  return text[x];',\n           '}']);\n      code = functionName + '(' + text + ')';\n      return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param {string} stringName Name of the string, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n * @private\n */\nBlockly.CustomLng.text.getIndex_ = function(stringName, where, opt_at) {\n  if (where == 'FIRST') {\n    return '0';\n  } else if (where == 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where == 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nBlockly.CustomLng['text_getSubstring'] = function(block) {\n  // Get substring.\n  var text = Blockly.CustomLng.valueToCode(block, 'STRING',\n      Blockly.CustomLng.ORDER_FUNCTION_CALL) || '\\'\\'';\n  var where1 = block.getFieldValue('WHERE1');\n  var where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 == 'FIRST' && where2 == 'LAST') {\n    code = text;\n  } else if (text.match(/^'?\\w+'?$/) ||\n      (where1 != 'FROM_END' && where1 != 'LAST' &&\n      where2 != 'FROM_END' && where2 != 'LAST')) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1, at2;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = Blockly.CustomLng.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = Blockly.CustomLng.getAdjusted(block, 'AT1', 1, false,\n            Blockly.CustomLng.ORDER_SUBTRACTION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    switch (where2) {\n      case 'FROM_START':\n        at2 = Blockly.CustomLng.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = Blockly.CustomLng.getAdjusted(block, 'AT2', 0, false,\n            Blockly.CustomLng.ORDER_SUBTRACTION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    var at1 = Blockly.CustomLng.getAdjusted(block, 'AT1');\n    var at2 = Blockly.CustomLng.getAdjusted(block, 'AT2');\n    var getIndex_ = Blockly.CustomLng.text.getIndex_;\n    var wherePascalCase = {'FIRST': 'First', 'LAST': 'Last',\n      'FROM_START': 'FromStart', 'FROM_END': 'FromEnd'};\n    var functionName = Blockly.CustomLng.provideFunction_(\n        'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\n        ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n        '(sequence' +\n        // The value for 'FROM_END' and'FROM_START' depends on `at` so\n        // we add it as a parameter.\n        ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\n        ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\n        ') {',\n          '  var start = ' + getIndex_('sequence', where1, 'at1') + ';',\n          '  var end = ' + getIndex_('sequence', where2, 'at2') + ' + 1;',\n          '  return sequence.slice(start, end);',\n          '}']);\n    code = functionName + '(' + text +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\n        ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\n        ')';\n  }\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['text_changeCase'] = function(block) {\n  // Change capitalization.\n  let code;\n  var OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null\n  };\n  var operator = OPERATORS[block.getFieldValue('CASE')];\n  var textOrder = operator ? Blockly.CustomLng.ORDER_MEMBER :\n      Blockly.CustomLng.ORDER_NONE;\n  var text = Blockly.CustomLng.valueToCode(block, 'TEXT',\n      textOrder) || '\\'\\'';\n  if (operator) {\n    // Upper and lower case are functions built into CustomLng.\n    code = text + operator;\n  } else {\n    // Title case is not a native CustomLng function.  Define one.\n    var functionName = Blockly.CustomLng.provideFunction_(\n        'textToTitleCase',\n        ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n            '(str) {',\n         '  return str.replace(/\\\\S+/g,',\n         '      function(txt) {return txt[0].toUpperCase() + ' +\n            'txt.substring(1).toLowerCase();});',\n         '}']);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['text_trim'] = function(block) {\n  // Trim spaces.\n  var OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()'\n  };\n  var operator = OPERATORS[block.getFieldValue('MODE')];\n  var text = Blockly.CustomLng.valueToCode(block, 'TEXT',\n      Blockly.CustomLng.ORDER_MEMBER) || '\\'\\'';\n  return [text + operator, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['text_print'] = function(block) {\n  // Print statement.\n  var msg = Blockly.CustomLng.valueToCode(block, 'TEXT',\n      Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n  return 'window.alert(' + msg + ');\\n';\n};\n\nBlockly.CustomLng['text_prompt_ext'] = function(block) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = Blockly.CustomLng.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = Blockly.CustomLng.valueToCode(block, 'TEXT',\n        Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n  }\n  var code = 'window.prompt(' + msg + ')';\n  var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, Blockly.CustomLng.ORDER_FUNCTION_CALL];\n};\n\nBlockly.CustomLng['text_prompt'] = Blockly.CustomLng['text_prompt_ext'];\n\nBlockly.CustomLng['text_count'] = function(block) {\n  var text = Blockly.CustomLng.valueToCode(block, 'TEXT',\n      Blockly.CustomLng.ORDER_MEMBER) || '\\'\\'';\n  var sub = Blockly.CustomLng.valueToCode(block, 'SUB',\n      Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n  var functionName = Blockly.CustomLng.provideFunction_(\n      'textCount',\n      ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n          '(haystack, needle) {',\n       '  if (needle.length === 0) {',\n       '    return haystack.length + 1;',\n       '  } else {',\n       '    return haystack.split(needle).length - 1;',\n       '  }',\n       '}']);\n  var code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Blockly.CustomLng.ORDER_SUBTRACTION];\n};\n\nBlockly.CustomLng['text_replace'] = function(block) {\n  var text = Blockly.CustomLng.valueToCode(block, 'TEXT',\n      Blockly.CustomLng.ORDER_MEMBER) || '\\'\\'';\n  var from = Blockly.CustomLng.valueToCode(block, 'FROM',\n      Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n  var to = Blockly.CustomLng.valueToCode(block, 'TO',\n      Blockly.CustomLng.ORDER_NONE) || '\\'\\'';\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  var functionName = Blockly.CustomLng.provideFunction_(\n      'textReplace',\n      ['function ' + Blockly.CustomLng.FUNCTION_NAME_PLACEHOLDER_ +\n          '(haystack, needle, replacement) {',\n       '  needle = ' +\n           'needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g,\"\\\\\\\\$1\")',\n       '                 .replace(/\\\\x08/g,\"\\\\\\\\x08\");',\n       '  return haystack.replace(new RegExp(needle, \\'g\\'), replacement);',\n       '}']);\n  var code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Blockly.CustomLng.ORDER_MEMBER];\n};\n\nBlockly.CustomLng['text_reverse'] = function(block) {\n  var text = Blockly.CustomLng.valueToCode(block, 'TEXT',\n      Blockly.CustomLng.ORDER_MEMBER) || '\\'\\'';\n  var code = text + '.split(\\'\\').reverse().join(\\'\\')';\n  return [code, Blockly.CustomLng.ORDER_MEMBER];\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating CustomLng for dynamic variable blocks.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\nimport Blockly from 'blockly';\n\n\n// CustomLng is dynamically typed.\nBlockly.CustomLng['variables_get_dynamic'] =\n    Blockly.CustomLng['variables_get'];\nBlockly.CustomLng['variables_set_dynamic'] =\n    Blockly.CustomLng['variables_set'];\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating CustomLng for variable blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\nimport Blockly from 'blockly';\n\n\nBlockly.CustomLng['variables_get'] = function(block) {\n  // Variable getter.\n  var code = Blockly.CustomLng.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  return [code, Blockly.CustomLng.ORDER_ATOMIC];\n};\n\nBlockly.CustomLng['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.CustomLng.valueToCode(block, 'VALUE',\n      Blockly.CustomLng.ORDER_ASSIGNMENT) || '';\n  var varName = Blockly.CustomLng.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  return varName + ' = ' + argument0 + '\\n';\n};\n","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define custom blocks.\n * @author abbychau@gmail.com (Abby Chau)\n */\n\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\n\n\nimport * as Blockly from 'blockly/core';\n\nconst constants = [];\n\nBlockly.Blocks['bi_call_return'] = {\n  /**\n   * Block for creating a list with any number of elements of any type.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.appendDummyInput()\n        .appendField(new Blockly.FieldTextInput('fcall1'), 'NAME')\n        .appendField('(');\n    this.setHelpUrl(Blockly.Msg.LISTS_CREATE_WITH_HELPURL);\n    this.setColour(290);\n    this.appendAddSubNamed('n1', 'items',\n                           null,\n                           'n1');\n    this.itemCount_ = 1;\n    this.updateShape_();\n    this.appendValueInput('chain')\n        .appendField(')')\n        .setCheck(null); // (['Method', 'Field']);\n    this.setInputsInline(true);\n    this.setOutput(true, null); // 'Method');\n//    this.setPreviousStatement(true, null);\n    this.setTooltip(Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP);\n  }\n};\n\nBlockly.Blocks[\"equal\"] = {\n  init: function() {\n    this.appendValueInput(\"Number\")\n      .setCheck(\"Number\")\n      .appendField(\"Buy Stock ID\")\n      .appendField(new Blockly.FieldNumber(0), \"ID\")\n      .appendField(\"For amount\")\n      .appendField(new Blockly.FieldNumber(0), \"Amount\")\n      .appendField(\"At Price\")\n      .appendField(new Blockly.FieldNumber(0), \"Price\");\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, \"String\");\n    this.setColour(230);\n    this.setTooltip(\"buy id\");\n    this.setHelpUrl(\"https://example.com\");\n  }\n};\n\nBlockly.CustomLng[\"equal\"] = function(block) {\n  var number_id = block.getFieldValue(\"ID\");\n  var number_amount = block.getFieldValue(\"Amount\");\n  var number_price = block.getFieldValue(\"Price\");\n  var value_number = Blockly.JavaScript.valueToCode(\n    block,\n    \"Number\",\n    Blockly.JavaScript.ORDER_ATOMIC\n  );\n  var code = `buy(${number_id},${number_amount},${number_price},${value_number});\\n`;\n  return code;\n};\n\nBlockly.Blocks[\"stock_buy_prog\"] = {\n  init: function() {\n    this.appendValueInput(\"Number\")\n      .setCheck(\"Number\")\n      .appendField(\"Buy Stock ID\");\n    this.appendValueInput(\"NAME\")\n      .setCheck(\"Number\")\n      .appendField(\"For amount\");\n    this.appendValueInput(\"NAME\")\n      .setCheck(\"Number\")\n      .appendField(\"At Price\");\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, \"String\");\n    this.setColour(230);\n    this.setTooltip(\"buy id\");\n    this.setHelpUrl(\"https://example.com\");\n  }\n};\n\nBlockly.JavaScript[\"stock_buy_prog\"] = function(block) {\n  var value_number = Blockly.JavaScript.valueToCode(\n    block,\n    \"Number\",\n    Blockly.JavaScript.ORDER_ATOMIC\n  );\n  var value_name = Blockly.JavaScript.valueToCode(\n    block,\n    \"NAME\",\n    Blockly.JavaScript.ORDER_ATOMIC\n  );\n  var code = `привет(${value_number},${value_name},${value_name});\\n`;\n  return code;\n};\n\nBlockly.Blocks[\"stock_fetch_price\"] = {\n  init: function() {\n    this.appendValueInput(\"Fetch\")\n      .setCheck(\"Number\")\n      .appendField(\"Fetch Price of Stock ID:\");\n    this.appendDummyInput()\n      .appendField(\"And set to:\")\n      .appendField(new Blockly.FieldVariable(\"item\"), \"variable\");\n    this.setInputsInline(true);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(230);\n    this.setTooltip(\"fetch stock price\");\n    this.setHelpUrl(\"https://example.com\");\n  }\n};\n\nBlockly.JavaScript[\"stock_fetch_price\"] = function(block) {\n  var value_fetch = Blockly.JavaScript.valueToCode(\n    block,\n    \"Fetch\",\n    Blockly.JavaScript.ORDER_ATOMIC\n  );\n  var variable_variable = Blockly.JavaScript.variableDB_.getName(\n    block.getFieldValue(\"variable\"),\n    Blockly.Variables.NAME_TYPE\n  );\n  var code = `fetch_price(${value_fetch},${variable_variable});\\n`;\n  return code;\n};\n\nBlockly.CustomLng['constant_get'] = function(block) {\n  const constant = constants.find((item) => item[0] === block.getFieldValue('A'));\n\n  return [constant[1], Blockly.CustomLng.ORDER_ATOMIC];\n};\n\nBlockly.CustomLng['logic_negate'] = (block) => {\n  const order = Blockly.JavaScript.ORDER_LOGICAL_NOT;\n  const argument0 = Blockly.CustomLng.valueToCode(block, 'BOOL', order) || 'ИСТИНА';\n  const code = `НЕ(${argument0})`;\n  return [code, order];\n};\n\nBlockly.CustomLng['logic_not_empty'] = (block) => {\n  const order = Blockly.JavaScript.ORDER_LOGICAL_NOT;\n  const argument0 = Blockly.CustomLng.valueToCode(block, 'VALUE', order) || '';\n  const code = `НЕ_ПУСТО(${argument0})`;\n  return [code, order];\n};\n\nBlockly.CustomLng['logic_ternary'] = function(block) {\n  // Ternary operator.\n  const value_if = Blockly.CustomLng.valueToCode(block, 'IF', Blockly.JavaScript.ORDER_CONDITIONAL) || 'ЛОЖЬ';\n  const value_then = Blockly.CustomLng.valueToCode(block, 'THEN', Blockly.JavaScript.ORDER_CONDITIONAL) || '';\n  const value_else = Blockly.CustomLng.valueToCode(block, 'ELSE', Blockly.JavaScript.ORDER_CONDITIONAL) || '';\n\n  const code = `ЕСЛИ(${value_if}, ${value_then}, ${value_else})`;\n\n  return [code, Blockly.JavaScript.ORDER_CONDITIONAL];\n};\n\nBlockly.CustomLng['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') == 'TRUE') ? 'ИСТИНА' : 'ЛОЖЬ';\n  return [code, Blockly.CustomLng.ORDER_ATOMIC];\n};\n\nBlockly.CustomLng['custom_condition'] = function(block) {\n  const functionNames = {\n    'ADD': 'СУММА',\n    'MINUS': 'РАЗН',\n    'MULTIPLY': 'ПРОИЗВЕД',\n    'DIVIDE': 'ЧАСТН',\n    'AND': 'И',\n    'OR': 'ИЛИ',\n    'EQ': 'РАВНО',\n    'NEQ': 'НЕ_РАВНО',\n    'LT': 'МЕНЬШЕ',\n    'LTE': 'МЕНЬШЕ_РАВНО',\n    'GT': 'БОЛЬШЕ',\n    'GTE': 'БОЛЬШЕ_РАВНО',\n    'NOT': 'НЕ',\n    'NOT_E': 'НЕ_ПУСТО'\n  };\n\n  const functionName = functionNames[block.getFieldValue('OP')];\n  const desc = block.getFieldValue('DESC');\n  const order = Blockly.CustomLng.ORDER_ADDITION;\n\n  let code = `УСЛОВИЕ('${desc}', ${functionName}, `;\n\n  const inputList = block.inputList.filter((input) => input.type === 1);\n\n  inputList.forEach((input, i) => {\n    if(i < inputList.length - 1){\n      code += Blockly.CustomLng.valueToCode(block, input.name, order) || '';\n      code += i === inputList.length - 2 ? '' : ', ';\n    }\n  });\n\n  code += `)`;\n  return [code, order];\n};\n\n\nBlockly.defineBlocksWithJsonArray([  // BEGIN JSON EXTRACT\n  {\n    \"type\": \"custom_arithmetic\",\n    \"message0\": \"%1 %2 %3\",\n    \"args0\": [\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"OP\",\n        \"options\": [\n          [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n          [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n          [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n          [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"]\n        ]\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"i_0\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"i_1\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"inputsInline\": false,\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"helpUrl\": \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n    \"extensions\": [\"math_op_tooltip\"],\n    \"mutator\": \"custom_add_arguments_mutator\"\n  },\n  {\n    \"type\": \"custom_logic_operation\",\n    \"message0\": \"%1 %2 %3\",\n    \"args0\": [\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"OP\",\n        \"options\": [\n          [\"%{BKY_LOGIC_OPERATION_AND}\", \"AND\"],\n          [\"%{BKY_LOGIC_OPERATION_OR}\", \"OR\"]\n        ]\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"i_0\",\n        \"check\": \"Boolean\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"i_1\",\n        \"check\": \"Boolean\"\n      }\n    ],\n    \"inputsInline\": false,\n    \"output\": \"Boolean\",\n    \"style\": \"logic_blocks\",\n    \"helpUrl\": \"%{BKY_LOGIC_OPERATION_HELPURL}\",\n    \"extensions\": [\"logic_op_tooltip\"],\n    \"mutator\": \"custom_add_arguments_mutator\"\n  },\n  {\n    \"type\": \"constant_get\",\n    \"message0\": \"%1\",\n    \"args0\": [\n      {\n        \"type\": \"field_label_serializable\",\n        \"text\": '%{BKY_VARIABLES_DEFAULT_NAME}',\n        \"name\": \"A\",\n      }\n    ],\n    \"output\": null,\n    \"style\": \"variable_blocks\",\n    \"helpUrl\": \"%{BKY_VARIABLES_GET_HELPURL}\",\n    \"tooltip\": \"%{BKY_VARIABLES_GET_TOOLTIP}\"\n  },\n  {\n    \"type\": \"logic_not_empty\",\n    \"message0\": \"%{BKY_LOGIC_NOT_EMPTY_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"VALUE\"\n      }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"logic_blocks\",\n    \"tooltip\": \"%{BKY_LOGIC_NEGATE_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_LOGIC_NEGATE_HELPURL}\"\n  },\n  {\n    \"type\": \"custom_condition\",\n    \"message0\": \"Условие %1 %2 Оператор %3 %4 %5\",\n    \"args0\": [\n      {\n        \"type\": \"field_input\",\n        \"name\": \"DESC\",\n        \"text\": \"Описание условия\",\n        \"spellcheck\": false\n      },\n      {\n        \"type\": \"input_dummy\"\n      },\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"OP\",\n        \"options\": [\n          [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n          [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n          [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n          [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n          [\"%{BKY_LOGIC_OPERATION_AND}\", \"AND\"],\n          [\"%{BKY_LOGIC_OPERATION_OR}\", \"OR\"],\n          [\"=\", \"EQ\"],\n          [\"\\u2260\", \"NEQ\"],\n          [\"\\u200F<\", \"LT\"],\n          [\"\\u200F\\u2264\", \"LTE\"],\n          [\"\\u200F>\", \"GT\"],\n          [\"\\u200F\\u2265\", \"GTE\"],\n          [\"%{BKY_CUSTOM_CONDITION_NOT}\", \"NOT\"],\n          [\"%{BKY_CUSTOM_CONDITION_NOT_EMPTY}\", \"NOT_E\"]\n        ]\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"i_0\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"i_1\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"inputsInline\": false,\n    \"output\": null,\n    \"style\": \"logic_blocks\",\n    \"helpUrl\": \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n    \"extensions\": [\"math_op_tooltip\"],\n    \"mutator\": \"custom_add_arguments_mutator\"\n  },\n]);\n\n\nBlockly.Constants.Math.ADD_ARGUMENTS_MUTATOR_MIXIN = {\n  mutationToDom: function() {\n    const container = Blockly.utils.xml.createElement('mutation');\n    container.setAttribute(`inputsLenght`, this.inputList.filter((input) => input.type === 1).length);\n\n    return container;\n  },\n \n  domToMutation: function(xmlElement) {\n    this.createShape_(xmlElement.getAttribute('inputsLenght'))\n  },\n\n  createShape_: function(inputsLenght) {\n    for(let i = 0; i < inputsLenght; i++){\n      const inputExists = this.getInput(`i_${i}`);\n\n      if (!inputExists) {\n        this.appendValueInput(`i_${i}`);\n      }\n    }\n  },\n\n  updateShape_: function() {\n    const inputs = this.inputList.filter((input) => input.type === 1);\n\n    const lastInputNotEmpty = inputs[inputs.length - 1].connection.targetBlock();\n    const lastButOneInputNotEmpty = inputs[inputs.length - 2].connection.targetBlock();\n\n    if(lastInputNotEmpty){\n      this.appendValueInput(`i_${inputs.length}`)\n    } else if (inputs.length > 2 && !lastInputNotEmpty && !lastButOneInputNotEmpty){\n      this.removeInput(`i_${inputs.length - 1}`);\n    }\n  }\n};\n\nBlockly.Constants.Math.ADD_ARGUMENTS_MUTATOR_EXTENSION = function() {\n  this.setOnChange(() => this.updateShape_());\n};\n\nBlockly.Extensions.registerMutator('custom_add_arguments_mutator',\n    Blockly.Constants.Math.ADD_ARGUMENTS_MUTATOR_MIXIN,\n    Blockly.Constants.Math.ADD_ARGUMENTS_MUTATOR_EXTENSION);\n\n\n\n/////////////////////////////////////////////////////////////////\nBlockly.Block.prototype.getMatchingConnection = function(otherBlock, conn) {\n      var connections = this.getConnections_(true);\n      var otherConnections = otherBlock.getConnections_(true);\n      // if (connections.length !== otherConnections.length) {\n      //   throw Error(\"Connection lists did not match in length.\");\n      // }\n      for (var i = 0; i < otherConnections.length; i++) {\n        if (otherConnections[i] === conn) {\n          return connections[i];\n        }\n      }\n      return null;\n    };\n\nBlockly.Names.prototype.safeName_ = function(name) {\n      if (!name) {\n        name = Blockly.Msg['UNNAMED_KEY'] || 'unnamed';\n      } else {\n        // Unfortunately names in non-latin characters will look like\n        // _E9_9F_B3_E4_B9_90 which is pretty meaningless.\n        // https://github.com/google/blockly/issues/1654\n        //name = encodeURI(name.replace(/ /g, '_')).replace(/[^\\w]/g, '_');\n        // Most languages don't allow names with leading numbers.\n        //if ('0123456789'.indexOf(name[0]) != -1) {\n        //  name = 'my_' + name;\n        //}\n      }\n      return name;\n    };\n\nexport {constants};","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define custom blocks.\n * @author abbychau@gmail.com (Abby Chau)\n */\n\n\nimport * as Blockly from 'blockly/core';\nimport Swal from \"sweetalert2\";\n\nvar renameVar = function(name) {\n  return name;\n};\n\nBlockly.prompt = function(msg, defaultValue, callback) {\n  Swal.fire({\n    title: \"Variable:\",\n    input: \"text\",\n    inputAttributes: {\n      autocapitalize: \"off\"\n    },\n    showCancelButton: true,\n    confirmButtonText: \"Look up\",\n    showLoaderOnConfirm: true,\n    allowOutsideClick: () => !Swal.isLoading()\n  }).then(result => {\n    if (result.value) {\n      callback(renameVar(result.value));\n    }\n  });\n};\n","'use strict';\n\nimport Blockly from 'blockly';\n\nBlockly.Msg[\"ADD_COMMENT\"] = \"Добавить комментарий\";\nBlockly.Msg[\"CANNOT_DELETE_VARIABLE_PROCEDURE\"] = \"Невозможно удалить переменную '%1', поскольку она является частью определения функции '%2'\";\nBlockly.Msg[\"CHANGE_VALUE_TITLE\"] = \"Измените значение:\";\nBlockly.Msg[\"CLEAN_UP\"] = \"Убрать блоки\";\nBlockly.Msg[\"COLLAPSED_WARNINGS_WARNING\"] = \"Свёрнутые блоки содержат предупреждения.\";\nBlockly.Msg[\"COLLAPSE_ALL\"] = \"Свернуть блоки\";\nBlockly.Msg[\"COLLAPSE_BLOCK\"] = \"Свернуть блок\";\nBlockly.Msg[\"COLOUR_BLEND_COLOUR1\"] = \"цвет 1\";\nBlockly.Msg[\"COLOUR_BLEND_COLOUR2\"] = \"цвет 2\";\nBlockly.Msg[\"COLOUR_BLEND_HELPURL\"] = \"https://meyerweb.com/eric/tools/color-blend/#:::rgbp\";  // untranslated\nBlockly.Msg[\"COLOUR_BLEND_RATIO\"] = \"доля цвета 1\";\nBlockly.Msg[\"COLOUR_BLEND_TITLE\"] = \"смешать\";\nBlockly.Msg[\"COLOUR_BLEND_TOOLTIP\"] = \"Смешивает два цвета в заданном соотношении (0.0 - 1.0).\";\nBlockly.Msg[\"COLOUR_PICKER_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Цвет\";\nBlockly.Msg[\"COLOUR_PICKER_TOOLTIP\"] = \"Выберите цвет из палитры.\";\nBlockly.Msg[\"COLOUR_RANDOM_HELPURL\"] = \"http://randomcolour.com\";  // untranslated\nBlockly.Msg[\"COLOUR_RANDOM_TITLE\"] = \"случайный цвет\";\nBlockly.Msg[\"COLOUR_RANDOM_TOOLTIP\"] = \"Выбирает цвет случайным образом.\";\nBlockly.Msg[\"COLOUR_RGB_BLUE\"] = \"синего\";\nBlockly.Msg[\"COLOUR_RGB_GREEN\"] = \"зелёного\";\nBlockly.Msg[\"COLOUR_RGB_HELPURL\"] = \"https://www.december.com/html/spec/colorpercompact.html\";  // untranslated\nBlockly.Msg[\"COLOUR_RGB_RED\"] = \"красного\";\nBlockly.Msg[\"COLOUR_RGB_TITLE\"] = \"цвет из\";\nBlockly.Msg[\"COLOUR_RGB_TOOLTIP\"] = \"Создаёт цвет с указанной пропорцией красного, зелёного и синего. Все значения должны быть между 0 и 100.\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_HELPURL\"] = \"https://github.com/google/blockly/wiki/Loops#loop-termination-blocks\";  // untranslated\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK\"] = \"выйти из цикла\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE\"] = \"перейти к следующему шагу цикла\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK\"] = \"Прерывает этот цикл.\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE\"] = \"Пропускает остаток цикла и переходит к следующему шагу.\";\nBlockly.Msg[\"CONTROLS_FLOW_STATEMENTS_WARNING\"] = \"Предупреждение: этот блок может использоваться только внутри цикла.\";\nBlockly.Msg[\"CONTROLS_FOREACH_HELPURL\"] = \"https://github.com/google/blockly/wiki/Loops#for-each\";  // untranslated\nBlockly.Msg[\"CONTROLS_FOREACH_TITLE\"] = \"для каждого элемента %1 в списке %2\";\nBlockly.Msg[\"CONTROLS_FOREACH_TOOLTIP\"] = \"Для каждого элемента в списке, присваивает переменной '%1' значение элемента  и выполняет указанные  команды.\";\nBlockly.Msg[\"CONTROLS_FOR_HELPURL\"] = \"https://github.com/google/blockly/wiki/Loops#count-with\";  // untranslated\nBlockly.Msg[\"CONTROLS_FOR_TITLE\"] = \"цикл по %1 от %2 до %3 с шагом %4\";\nBlockly.Msg[\"CONTROLS_FOR_TOOLTIP\"] = \"Присваивает переменной '%1' значения от начального до конечного с заданным шагом и выполняет указанные команды.\";\nBlockly.Msg[\"CONTROLS_IF_ELSEIF_TOOLTIP\"] = \"Добавляет условие к блоку \\\"если\\\"\";\nBlockly.Msg[\"CONTROLS_IF_ELSE_TOOLTIP\"] = \"Добавить заключительный подблок для случая, когда все условия ложны.\";\nBlockly.Msg[\"CONTROLS_IF_HELPURL\"] = \"https://github.com/google/blockly/wiki/IfElse\";  // untranslated\nBlockly.Msg[\"CONTROLS_IF_IF_TOOLTIP\"] = \"Добавьте, удалите, переставьте фрагменты для переделки блока \\\"если\\\".\";\nBlockly.Msg[\"CONTROLS_IF_MSG_ELSE\"] = \"иначе\";\nBlockly.Msg[\"CONTROLS_IF_MSG_ELSEIF\"] = \"иначе если\";\nBlockly.Msg[\"CONTROLS_IF_MSG_IF\"] = \"если\";\nBlockly.Msg[\"CONTROLS_IF_TOOLTIP_1\"] = \"Если условие истинно, выполняет команды.\";\nBlockly.Msg[\"CONTROLS_IF_TOOLTIP_2\"] = \"Если условие истинно, выполняет первый блок команд. Иначе выполняется второй блок команд.\";\nBlockly.Msg[\"CONTROLS_IF_TOOLTIP_3\"] = \"Если первое условие истинно, то выполняет первый блок команд. Иначе, если второе условие истинно, выполняет второй блок команд.\";\nBlockly.Msg[\"CONTROLS_IF_TOOLTIP_4\"] = \"Если первое условие истинно, то выполняет первый блок команд.  В противном случае, если второе условие истинно, выполняет второй блок команд.  Если ни одно из условий не истинно, выполняет последний блок команд.\";\nBlockly.Msg[\"CONTROLS_REPEAT_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Цикл_(программирование)\";\nBlockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"] = \"выполнить\";\nBlockly.Msg[\"CONTROLS_REPEAT_TITLE\"] = \"повторить %1 раз\";\nBlockly.Msg[\"CONTROLS_REPEAT_TOOLTIP\"] = \"Выполняет некоторые команды несколько раз.\";\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_HELPURL\"] = \"https://github.com/google/blockly/wiki/Loops#repeat\";  // untranslated\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_OPERATOR_UNTIL\"] = \"повторять, пока не\";\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_OPERATOR_WHILE\"] = \"повторять, пока\";\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL\"] = \"Пока значение ложно, выполняет команды\";\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_TOOLTIP_WHILE\"] = \"Пока значение истинно, выполняет команды.\";\nBlockly.Msg[\"CUSTOM_CONDITION_NOT\"] = \"не\";\nBlockly.Msg[\"CUSTOM_CONDITION_NOT_EMPTY\"] = \"не пусто\";\nBlockly.Msg[\"DELETE_ALL_BLOCKS\"] = \"Удалить все блоки (%1)?\";\nBlockly.Msg[\"DELETE_BLOCK\"] = \"Удалить блок\";\nBlockly.Msg[\"DELETE_VARIABLE\"] = \"Удалить переменную '%1'\";\nBlockly.Msg[\"DELETE_VARIABLE_CONFIRMATION\"] = \"Удалить %1 использований переменной '%2'?\";\nBlockly.Msg[\"DELETE_X_BLOCKS\"] = \"Удалить %1 блоков\";\nBlockly.Msg[\"DISABLE_BLOCK\"] = \"Отключить блок\";\nBlockly.Msg[\"DUPLICATE_BLOCK\"] = \"Дублировать\";\nBlockly.Msg[\"DUPLICATE_COMMENT\"] = \"Дублировать комментарий\";\nBlockly.Msg[\"ENABLE_BLOCK\"] = \"Включить блок\";\nBlockly.Msg[\"EXPAND_ALL\"] = \"Развернуть блоки\";\nBlockly.Msg[\"EXPAND_BLOCK\"] = \"Развернуть блок\";\nBlockly.Msg[\"EXTERNAL_INPUTS\"] = \"Вставки снаружи\";\nBlockly.Msg[\"HELP\"] = \"Справка\";\nBlockly.Msg[\"INLINE_INPUTS\"] = \"Вставки внутри\";\nBlockly.Msg[\"IOS_CANCEL\"] = \"Отмена\";\nBlockly.Msg[\"IOS_ERROR\"] = \"Ошибка\";\nBlockly.Msg[\"IOS_OK\"] = \"OK\";\nBlockly.Msg[\"IOS_PROCEDURES_ADD_INPUT\"] = \"+ Добавить входную переменную\";\nBlockly.Msg[\"IOS_PROCEDURES_ALLOW_STATEMENTS\"] = \"Разрешить операторы\";\nBlockly.Msg[\"IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR\"] = \"У этой функции есть дублирующиеся входные переменные.\";\nBlockly.Msg[\"IOS_PROCEDURES_INPUTS\"] = \"ВХОД\";\nBlockly.Msg[\"IOS_VARIABLES_ADD_BUTTON\"] = \"Добавить\";\nBlockly.Msg[\"IOS_VARIABLES_ADD_VARIABLE\"] = \"+ Добавить переменную\";\nBlockly.Msg[\"IOS_VARIABLES_DELETE_BUTTON\"] = \"Удалить\";\nBlockly.Msg[\"IOS_VARIABLES_EMPTY_NAME_ERROR\"] = \"Вы не можете использовать пустое имя переменной.\";\nBlockly.Msg[\"IOS_VARIABLES_RENAME_BUTTON\"] = \"Переименовать\";\nBlockly.Msg[\"IOS_VARIABLES_VARIABLE_NAME\"] = \"Имя переменной\";\nBlockly.Msg[\"LISTS_CREATE_EMPTY_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#create-empty-list\";  // untranslated\nBlockly.Msg[\"LISTS_CREATE_EMPTY_TITLE\"] = \"создать пустой список\";\nBlockly.Msg[\"LISTS_CREATE_EMPTY_TOOLTIP\"] = \"Возвращает список длины 0, не содержащий данных\";\nBlockly.Msg[\"LISTS_CREATE_WITH_CONTAINER_TITLE_ADD\"] = \"список\";\nBlockly.Msg[\"LISTS_CREATE_WITH_CONTAINER_TOOLTIP\"] = \"Добавьте, удалите, переставьте элементы для переделки блока списка.\";\nBlockly.Msg[\"LISTS_CREATE_WITH_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#create-list-with\";\nBlockly.Msg[\"LISTS_CREATE_WITH_INPUT_WITH\"] = \"создать список из\";\nBlockly.Msg[\"LISTS_CREATE_WITH_ITEM_TOOLTIP\"] = \"Добавляет элемент к списку.\";\nBlockly.Msg[\"LISTS_CREATE_WITH_TOOLTIP\"] = \"Создаёт список с любым числом элементов.\";\nBlockly.Msg[\"LISTS_GET_INDEX_FIRST\"] = \"первый\";\nBlockly.Msg[\"LISTS_GET_INDEX_FROM_END\"] = \"№ с конца\";\nBlockly.Msg[\"LISTS_GET_INDEX_FROM_START\"] = \"#\";  // untranslated\nBlockly.Msg[\"LISTS_GET_INDEX_GET\"] = \"взять\";\nBlockly.Msg[\"LISTS_GET_INDEX_GET_REMOVE\"] = \"взять и удалить\";\nBlockly.Msg[\"LISTS_GET_INDEX_LAST\"] = \"последний\";\nBlockly.Msg[\"LISTS_GET_INDEX_RANDOM\"] = \"произвольный\";\nBlockly.Msg[\"LISTS_GET_INDEX_REMOVE\"] = \"удалить\";\nBlockly.Msg[\"LISTS_GET_INDEX_TAIL\"] = \"\";  // untranslated\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_FIRST\"] = \"Возвращает первый элемент списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_FROM\"] = \"Возвращает элемент в указанной позиции списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_LAST\"] = \"Возвращает последний элемент списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_RANDOM\"] = \"Возвращает случайный элемент списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST\"] = \"Удаляет и возвращает первый элемент списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM\"] = \"Удаляет и возвращает элемент в указанной позиции списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST\"] = \"Удаляет и возвращает последний элемент списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM\"] = \"Удаляет и возвращает случайный элемент списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST\"] = \"Удаляет первый элемент списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM\"] = \"Удаляет элемент в указанной позиции списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST\"] = \"Удаляет последний элемент списка.\";\nBlockly.Msg[\"LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM\"] = \"Удаляет случайный элемент списка.\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_END_FROM_END\"] = \"по № с конца\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_END_FROM_START\"] = \"по №\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_END_LAST\"] = \"по последний\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#getting-a-sublist\";  // untranslated\nBlockly.Msg[\"LISTS_GET_SUBLIST_START_FIRST\"] = \"взять подсписок с первого\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_START_FROM_END\"] = \"взять подсписок с № с конца\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_START_FROM_START\"] = \"взять подсписок с №\";\nBlockly.Msg[\"LISTS_GET_SUBLIST_TAIL\"] = \"\";  // untranslated\nBlockly.Msg[\"LISTS_GET_SUBLIST_TOOLTIP\"] = \"Создаёт копию указанной части списка.\";\nBlockly.Msg[\"LISTS_INDEX_FROM_END_TOOLTIP\"] = \"%1 - последний элемент.\";\nBlockly.Msg[\"LISTS_INDEX_FROM_START_TOOLTIP\"] = \"%1 - первый элемент.\";\nBlockly.Msg[\"LISTS_INDEX_OF_FIRST\"] = \"найти первое вхождение элемента\";\nBlockly.Msg[\"LISTS_INDEX_OF_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list\";  // untranslated\nBlockly.Msg[\"LISTS_INDEX_OF_LAST\"] = \"найти последнее вхождение элемента\";\nBlockly.Msg[\"LISTS_INDEX_OF_TOOLTIP\"] = \"Возвращает номер позиции первого/последнего вхождения элемента в списке. Возвращает %1, если элемент не найден.\";\nBlockly.Msg[\"LISTS_INLIST\"] = \"в списке\";\nBlockly.Msg[\"LISTS_ISEMPTY_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#is-empty\";  // untranslated\nBlockly.Msg[\"LISTS_ISEMPTY_TITLE\"] = \"%1 пуст\";\nBlockly.Msg[\"LISTS_ISEMPTY_TOOLTIP\"] = \"Возвращает значение истина, если список пуст.\";\nBlockly.Msg[\"LISTS_LENGTH_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#length-of\";  // untranslated\nBlockly.Msg[\"LISTS_LENGTH_TITLE\"] = \"длина %1\";\nBlockly.Msg[\"LISTS_LENGTH_TOOLTIP\"] = \"Возвращает длину списка.\";\nBlockly.Msg[\"LISTS_REPEAT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#create-list-with\";  // untranslated\nBlockly.Msg[\"LISTS_REPEAT_TITLE\"] = \"создать список из элемента %1, повторяющегося %2 раз\";\nBlockly.Msg[\"LISTS_REPEAT_TOOLTIP\"] = \"Создаёт список, состоящий из заданного числа копий элемента.\";\nBlockly.Msg[\"LISTS_REVERSE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#reversing-a-list\";\nBlockly.Msg[\"LISTS_REVERSE_MESSAGE0\"] = \"изменить порядок на обратный %1\";\nBlockly.Msg[\"LISTS_REVERSE_TOOLTIP\"] = \"Изменить порядок списка на обратный.\";\nBlockly.Msg[\"LISTS_SET_INDEX_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#in-list--set\";  // untranslated\nBlockly.Msg[\"LISTS_SET_INDEX_INPUT_TO\"] = \"=\";\nBlockly.Msg[\"LISTS_SET_INDEX_INSERT\"] = \"вставить в\";\nBlockly.Msg[\"LISTS_SET_INDEX_SET\"] = \"присвоить\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST\"] = \"Вставляет элемент в начало списка.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_INSERT_FROM\"] = \"Вставляет элемент в указанной позиции списка.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_INSERT_LAST\"] = \"Добавляет элемент в конец списка.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM\"] = \"Вставляет элемент в случайное место в списке.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_SET_FIRST\"] = \"Присваивает значение первому элементу списка.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_SET_FROM\"] = \"Присваивает значение элементу в указанной позиции списка.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_SET_LAST\"] = \"Присваивает значение последнему элементу списка.\";\nBlockly.Msg[\"LISTS_SET_INDEX_TOOLTIP_SET_RANDOM\"] = \"Присваивает значение случайному элементу списка.\";\nBlockly.Msg[\"LISTS_SORT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#sorting-a-list\";\nBlockly.Msg[\"LISTS_SORT_ORDER_ASCENDING\"] = \"по возрастанию\";\nBlockly.Msg[\"LISTS_SORT_ORDER_DESCENDING\"] = \"по убыванию\";\nBlockly.Msg[\"LISTS_SORT_TITLE\"] = \"сортировать %1 %2 %3\";\nBlockly.Msg[\"LISTS_SORT_TOOLTIP\"] = \"Сортировать копию списка.\";\nBlockly.Msg[\"LISTS_SORT_TYPE_IGNORECASE\"] = \"по алфавиту, без учёта регистра\";\nBlockly.Msg[\"LISTS_SORT_TYPE_NUMERIC\"] = \"числовая\";\nBlockly.Msg[\"LISTS_SORT_TYPE_TEXT\"] = \"по алфавиту\";\nBlockly.Msg[\"LISTS_SPLIT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists\";\nBlockly.Msg[\"LISTS_SPLIT_LIST_FROM_TEXT\"] = \"сделать список из текста\";\nBlockly.Msg[\"LISTS_SPLIT_TEXT_FROM_LIST\"] = \"собрать текст из списка\";\nBlockly.Msg[\"LISTS_SPLIT_TOOLTIP_JOIN\"] = \"Соединяет список текстов в один текст с разделителями.\";\nBlockly.Msg[\"LISTS_SPLIT_TOOLTIP_SPLIT\"] = \"Разбивает текст в список текстов, по разделителям.\";\nBlockly.Msg[\"LISTS_SPLIT_WITH_DELIMITER\"] = \"с разделителем\";\nBlockly.Msg[\"LOGIC_BOOLEAN_FALSE\"] = \"ложь\";\nBlockly.Msg[\"LOGIC_BOOLEAN_HELPURL\"] = \"https://github.com/google/blockly/wiki/Logic#values\";  // untranslated\nBlockly.Msg[\"LOGIC_BOOLEAN_TOOLTIP\"] = \"Возвращает значение истина или ложь.\";\nBlockly.Msg[\"LOGIC_BOOLEAN_TRUE\"] = \"истина\";\nBlockly.Msg[\"LOGIC_COMPARE_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Неравенство\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_EQ\"] = \"Возвращает положительное значение, если вводы равны.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_GT\"] = \"Возвращает значение истина, если первая вставка больше второй.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_GTE\"] = \"Возвращает значение истина, если первая вставка больше или равна  второй.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_LT\"] = \"Возвращает положительное значение, если первый ввод меньше второго.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_LTE\"] = \"Возвращает значение истина, если первая вставка меньше или равна  второй.\";\nBlockly.Msg[\"LOGIC_COMPARE_TOOLTIP_NEQ\"] = \"Возвращает положительное значение, если вводы не равны.\";\nBlockly.Msg[\"LOGIC_NEGATE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Logic#not\";  // untranslated\nBlockly.Msg[\"LOGIC_NEGATE_TITLE\"] = \"не %1\";\nBlockly.Msg[\"LOGIC_NOT_EMPTY_TITLE\"] = \"не пусто %1\";\nBlockly.Msg[\"LOGIC_NEGATE_TOOLTIP\"] = \"Возвращает значение истина, если вставка ложна. Возвращает значение ложь, если вставка истинна.\";\nBlockly.Msg[\"LOGIC_NULL\"] = \"ничто\";\nBlockly.Msg[\"LOGIC_NULL_HELPURL\"] = \"https://en.wikipedia.org/wiki/Nullable_type\";\nBlockly.Msg[\"LOGIC_NULL_TOOLTIP\"] = \"Возвращает ничто.\";\nBlockly.Msg[\"LOGIC_OPERATION_AND\"] = \"и\";\nBlockly.Msg[\"LOGIC_OPERATION_HELPURL\"] = \"https://github.com/google/blockly/wiki/Logic#logical-operations\";  // untranslated\nBlockly.Msg[\"LOGIC_OPERATION_OR\"] = \"или\";\nBlockly.Msg[\"LOGIC_OPERATION_TOOLTIP_AND\"] = \"Возвращает значение истина, если обе вставки истинны.\";\nBlockly.Msg[\"LOGIC_OPERATION_TOOLTIP_OR\"] = \"Возвращает значение истина, если хотя бы одна из вставок истинна.\";\nBlockly.Msg[\"LOGIC_TERNARY_CONDITION\"] = \"ЕСЛИ\";\nBlockly.Msg[\"LOGIC_TERNARY_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Тернарная_условная_операция\";\nBlockly.Msg[\"LOGIC_TERNARY_IF_FALSE\"] = \"ложь\";\nBlockly.Msg[\"LOGIC_TERNARY_IF_TRUE\"] = \"истина\";\nBlockly.Msg[\"LOGIC_TERNARY_TOOLTIP\"] = \"Проверяет условие выбора. Если условие истинно, возвращает первое значение, в противном случае возвращает второе значение.\";\nBlockly.Msg[\"MATH_ADDITION_SYMBOL\"] = \"+\";  // untranslated\nBlockly.Msg[\"MATH_ARITHMETIC_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Арифметика\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_ADD\"] = \"Возвращает сумму двух чисел.\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_DIVIDE\"] = \"Возвращает частное от деления первого числа на второе.\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_MINUS\"] = \"Возвращает разность двух чисел.\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_MULTIPLY\"] = \"Возвращает произведение двух чисел.\";\nBlockly.Msg[\"MATH_ARITHMETIC_TOOLTIP_POWER\"] = \"Возвращает первое число, возведённое в степень второго числа.\";\nBlockly.Msg[\"MATH_ATAN2_HELPURL\"] = \"https://en.wikipedia.org/wiki/Atan2\";\nBlockly.Msg[\"MATH_ATAN2_TITLE\"] = \"atan2 от X:%1 Y:%2\";\nBlockly.Msg[\"MATH_ATAN2_TOOLTIP\"] = \"Возвращает арктангенс точки (X, Y) в градусах от -180 до 180.\";\nBlockly.Msg[\"MATH_CHANGE_HELPURL\"] = \"https://ru.wikipedia.org/wiki/%D0%98%D0%B4%D0%B8%D0%BE%D0%BC%D0%B0_%28%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%29#.D0.98.D0.BD.D0.BA.D1.80.D0.B5.D0.BC.D0.B5.D0.BD.D1.82\";\nBlockly.Msg[\"MATH_CHANGE_TITLE\"] = \"увеличить %1 на %2\";\nBlockly.Msg[\"MATH_CHANGE_TOOLTIP\"] = \"Добавляет число к переменной '%1'.\";\nBlockly.Msg[\"MATH_CONSTANT_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Математическая_константа\";\nBlockly.Msg[\"MATH_CONSTANT_TOOLTIP\"] = \"Возвращает одну из распространённых  констант: π (3.141...), e (2.718...), φ (1.618...), sqrt(2) (1.414...), sqrt(½) (0.707...) или ∞ (бесконечность).\";\nBlockly.Msg[\"MATH_CONSTRAIN_HELPURL\"] = \"https://en.wikipedia.org/wiki/Clamping_(graphics)\";  // untranslated\nBlockly.Msg[\"MATH_CONSTRAIN_TITLE\"] = \"ограничить %1 снизу %2 сверху %3\";\nBlockly.Msg[\"MATH_CONSTRAIN_TOOLTIP\"] = \"Ограничивает число нижней и верхней границами (включительно).\";\nBlockly.Msg[\"MATH_DIVISION_SYMBOL\"] = \"÷\";  // untranslated\nBlockly.Msg[\"MATH_IS_DIVISIBLE_BY\"] = \"делится на\";\nBlockly.Msg[\"MATH_IS_EVEN\"] = \"чётное\";\nBlockly.Msg[\"MATH_IS_NEGATIVE\"] = \"отрицательное\";\nBlockly.Msg[\"MATH_IS_ODD\"] = \"нечётное\";\nBlockly.Msg[\"MATH_IS_POSITIVE\"] = \"положительное\";\nBlockly.Msg[\"MATH_IS_PRIME\"] = \"простое\";\nBlockly.Msg[\"MATH_IS_TOOLTIP\"] = \"Проверяет, является ли число чётным, нечётным, простым, целым, положительным, отрицательным или оно кратно определённому числу.  Возвращает значение истина или ложь.\";\nBlockly.Msg[\"MATH_IS_WHOLE\"] = \"целое\";\nBlockly.Msg[\"MATH_MODULO_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Деление_с_остатком\";\nBlockly.Msg[\"MATH_MODULO_TITLE\"] = \"остаток от %1 : %2\";\nBlockly.Msg[\"MATH_MODULO_TOOLTIP\"] = \"Возвращает остаток от деления двух чисел.\";\nBlockly.Msg[\"MATH_MULTIPLICATION_SYMBOL\"] = \"×\";  // untranslated\nBlockly.Msg[\"MATH_NUMBER_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Число\";\nBlockly.Msg[\"MATH_NUMBER_TOOLTIP\"] = \"Число.\";\nBlockly.Msg[\"MATH_ONLIST_HELPURL\"] = \"\";  // untranslated\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_AVERAGE\"] = \"среднее арифметическое списка\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_MAX\"] = \"наибольшее в списке\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_MEDIAN\"] = \"медиана списка\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_MIN\"] = \"наименьшее в списке\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_MODE\"] = \"моды списка\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_RANDOM\"] = \"случайный элемент списка\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_STD_DEV\"] = \"стандартное отклонение списка\";\nBlockly.Msg[\"MATH_ONLIST_OPERATOR_SUM\"] = \"сумма списка\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_AVERAGE\"] = \"Возвращает среднее арифметическое списка.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_MAX\"] = \"Возвращает наибольшее число списка.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_MEDIAN\"] = \"Возвращает медиану списка.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_MIN\"] = \"Возвращает наименьшее число списка.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_MODE\"] = \"Возвращает список наиболее часто встречающихся элементов списка.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_RANDOM\"] = \"Возвращает случайный элемент списка.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_STD_DEV\"] = \"Возвращает стандартное отклонение списка.\";\nBlockly.Msg[\"MATH_ONLIST_TOOLTIP_SUM\"] = \"Возвращает сумму всех чисел в списке.\";\nBlockly.Msg[\"MATH_POWER_SYMBOL\"] = \"^\";  // untranslated\nBlockly.Msg[\"MATH_RANDOM_FLOAT_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Генератор_псевдослучайных_чисел\";\nBlockly.Msg[\"MATH_RANDOM_FLOAT_TITLE_RANDOM\"] = \"случайное число от 0 (включительно) до 1\";\nBlockly.Msg[\"MATH_RANDOM_FLOAT_TOOLTIP\"] = \"Возвращает случайное число от 0.0 (включительно) до 1.0.\";\nBlockly.Msg[\"MATH_RANDOM_INT_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Генератор_псевдослучайных_чисел\";\nBlockly.Msg[\"MATH_RANDOM_INT_TITLE\"] = \"случайное целое число от %1 для %2\";\nBlockly.Msg[\"MATH_RANDOM_INT_TOOLTIP\"] = \"Возвращает случайное число между двумя заданными пределами (включая и их).\";\nBlockly.Msg[\"MATH_ROUND_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Округление\";\nBlockly.Msg[\"MATH_ROUND_OPERATOR_ROUND\"] = \"округлить\";\nBlockly.Msg[\"MATH_ROUND_OPERATOR_ROUNDDOWN\"] = \"округлить к меньшему\";\nBlockly.Msg[\"MATH_ROUND_OPERATOR_ROUNDUP\"] = \"округлить к большему\";\nBlockly.Msg[\"MATH_ROUND_TOOLTIP\"] = \"Округляет число до большего или меньшего.\";\nBlockly.Msg[\"MATH_SINGLE_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Квадратный_корень\";\nBlockly.Msg[\"MATH_SINGLE_OP_ABSOLUTE\"] = \"модуль\";\nBlockly.Msg[\"MATH_SINGLE_OP_ROOT\"] = \"квадратный корень\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_ABS\"] = \"Возвращает модуль числа\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_EXP\"] = \"Возвращает е в указанной степени.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_LN\"] = \"Возвращает натуральный логарифм числа.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_LOG10\"] = \"Возвращает десятичный логарифм числа.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_NEG\"] = \"Возвращает противоположное число.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_POW10\"] = \"Возвращает 10 в указанной степени.\";\nBlockly.Msg[\"MATH_SINGLE_TOOLTIP_ROOT\"] = \"Возвращает квадратный корень числа.\";\nBlockly.Msg[\"MATH_SUBTRACTION_SYMBOL\"] = \"-\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_ACOS\"] = \"acos\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_ASIN\"] = \"asin\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_ATAN\"] = \"atan\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_COS\"] = \"cos\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Тригонометрические_функции\";\nBlockly.Msg[\"MATH_TRIG_SIN\"] = \"sin\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_TAN\"] = \"tan\";  // untranslated\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_ACOS\"] = \"Возвращает арккосинус (в градусах).\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_ASIN\"] = \"Возвращает арксинус (в градусах).\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_ATAN\"] = \"Возвращает арктангенс (в градусах)\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_COS\"] = \"Возвращает косинус угла в градусах.\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_SIN\"] = \"Возвращает синус угла в градусах.\";\nBlockly.Msg[\"MATH_TRIG_TOOLTIP_TAN\"] = \"Возвращает тангенс угла в градусах.\";\nBlockly.Msg[\"NEW_COLOUR_VARIABLE\"] = \"Создать переменную цвета...\";\nBlockly.Msg[\"NEW_NUMBER_VARIABLE\"] = \"Создать числовую переменную...\";\nBlockly.Msg[\"NEW_STRING_VARIABLE\"] = \"Создать строковую переменную...\";\nBlockly.Msg[\"NEW_VARIABLE\"] = \"Создать переменную…\";\nBlockly.Msg[\"NEW_VARIABLE_TITLE\"] = \"Имя новой переменной:\";\nBlockly.Msg[\"NEW_VARIABLE_TYPE_TITLE\"] = \"Новый тип переменной:\";\nBlockly.Msg[\"ORDINAL_NUMBER_SUFFIX\"] = \"\";  // untranslated\nBlockly.Msg[\"PROCEDURES_ALLOW_STATEMENTS\"] = \"разрешить операторы\";\nBlockly.Msg[\"PROCEDURES_BEFORE_PARAMS\"] = \"с:\";\nBlockly.Msg[\"PROCEDURES_CALLNORETURN_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Подпрограмма\";\nBlockly.Msg[\"PROCEDURES_CALLNORETURN_TOOLTIP\"] = \"Исполняет определённую пользователем процедуру '%1'.\";\nBlockly.Msg[\"PROCEDURES_CALLRETURN_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Подпрограмма\";\nBlockly.Msg[\"PROCEDURES_CALLRETURN_TOOLTIP\"] = \"Исполняет определённую пользователем процедуру '%1' и возвращает вычисленное  значение.\";\nBlockly.Msg[\"PROCEDURES_CALL_BEFORE_PARAMS\"] = \"с:\";\nBlockly.Msg[\"PROCEDURES_CREATE_DO\"] = \"Создать вызов '%1'\";\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_COMMENT\"] = \"Опишите эту функцию…\";\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_DO\"] = \"\";  // untranslated\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_HELPURL\"] = \"https://en.wikipedia.org/wiki/Subroutine\";  // untranslated\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_PROCEDURE\"] = \"выполнить что-то\";\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_TITLE\"] = \"чтобы\";\nBlockly.Msg[\"PROCEDURES_DEFNORETURN_TOOLTIP\"] = \"Создаёт процедуру, не возвращающую значение.\";\nBlockly.Msg[\"PROCEDURES_DEFRETURN_HELPURL\"] = \"https://en.wikipedia.org/wiki/Subroutine\";  // untranslated\nBlockly.Msg[\"PROCEDURES_DEFRETURN_RETURN\"] = \"вернуть\";\nBlockly.Msg[\"PROCEDURES_DEFRETURN_TOOLTIP\"] = \"Создаёт процедуру, возвращающую значение.\";\nBlockly.Msg[\"PROCEDURES_DEF_DUPLICATE_WARNING\"] = \"Предупреждение: эта функция имеет повторяющиеся параметры.\";\nBlockly.Msg[\"PROCEDURES_HIGHLIGHT_DEF\"] = \"Выделить определение процедуры\";\nBlockly.Msg[\"PROCEDURES_IFRETURN_HELPURL\"] = \"http://c2.com/cgi/wiki?GuardClause\";\nBlockly.Msg[\"PROCEDURES_IFRETURN_TOOLTIP\"] = \"Если первое значение истинно, возвращает второе значение.\";\nBlockly.Msg[\"PROCEDURES_IFRETURN_WARNING\"] = \"Предупреждение: Этот блок может использоваться только внутри определения функции.\";\nBlockly.Msg[\"PROCEDURES_MUTATORARG_TITLE\"] = \"имя параметра:\";\nBlockly.Msg[\"PROCEDURES_MUTATORARG_TOOLTIP\"] = \"Добавить входной параметр в функцию.\";\nBlockly.Msg[\"PROCEDURES_MUTATORCONTAINER_TITLE\"] = \"параметры\";\nBlockly.Msg[\"PROCEDURES_MUTATORCONTAINER_TOOLTIP\"] = \"Добавить, удалить или изменить порядок входных параметров для этой функции.\";\nBlockly.Msg[\"REDO\"] = \"Повторить\";\nBlockly.Msg[\"REMOVE_COMMENT\"] = \"Удалить комментарий\";\nBlockly.Msg[\"RENAME_VARIABLE\"] = \"Переименовать переменную…\";\nBlockly.Msg[\"RENAME_VARIABLE_TITLE\"] = \"Переименовать все переменные '%1' в:\";\nBlockly.Msg[\"TEXT_APPEND_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#text-modification\";  // untranslated\nBlockly.Msg[\"TEXT_APPEND_TITLE\"] = \"к %1 добавить текст %2\";\nBlockly.Msg[\"TEXT_APPEND_TOOLTIP\"] = \"Добавить текст к переменной «%1».\";\nBlockly.Msg[\"TEXT_CHANGECASE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#adjusting-text-case\";  // untranslated\nBlockly.Msg[\"TEXT_CHANGECASE_OPERATOR_LOWERCASE\"] = \"в строчные буквы\";\nBlockly.Msg[\"TEXT_CHANGECASE_OPERATOR_TITLECASE\"] = \"в Заглавные Начальные Буквы\";\nBlockly.Msg[\"TEXT_CHANGECASE_OPERATOR_UPPERCASE\"] = \"в ЗАГЛАВНЫЕ БУКВЫ\";\nBlockly.Msg[\"TEXT_CHANGECASE_TOOLTIP\"] = \"Возвращает копию текста с ЗАГЛАВНЫМИ или строчными буквами.\";\nBlockly.Msg[\"TEXT_CHARAT_FIRST\"] = \"взять первую букву\";\nBlockly.Msg[\"TEXT_CHARAT_FROM_END\"] = \"взять букву № с конца\";\nBlockly.Msg[\"TEXT_CHARAT_FROM_START\"] = \"взять букву №\";\nBlockly.Msg[\"TEXT_CHARAT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#extracting-text\";  // untranslated\nBlockly.Msg[\"TEXT_CHARAT_LAST\"] = \"взять последнюю букву\";\nBlockly.Msg[\"TEXT_CHARAT_RANDOM\"] = \"взять случайную букву\";\nBlockly.Msg[\"TEXT_CHARAT_TAIL\"] = \"\";  // untranslated\nBlockly.Msg[\"TEXT_CHARAT_TITLE\"] = \"в тексте %1 %2\";\nBlockly.Msg[\"TEXT_CHARAT_TOOLTIP\"] = \"Возвращает букву в указанной позиции.\";\nBlockly.Msg[\"TEXT_COUNT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#counting-substrings\";\nBlockly.Msg[\"TEXT_COUNT_MESSAGE0\"] = \"подсчитать количество %1 в %2\";\nBlockly.Msg[\"TEXT_COUNT_TOOLTIP\"] = \"Подсчитать, сколько раз отрывок текста появляется в другом тексте.\";\nBlockly.Msg[\"TEXT_CREATE_JOIN_ITEM_TOOLTIP\"] = \"Добавить элемент к тексту.\";\nBlockly.Msg[\"TEXT_CREATE_JOIN_TITLE_JOIN\"] = \"соединить\";\nBlockly.Msg[\"TEXT_CREATE_JOIN_TOOLTIP\"] = \"Добавьте, удалите, переставьте фрагменты для переделки текстового блока.\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_END_FROM_END\"] = \"по букву № с конца\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_END_FROM_START\"] = \"по букву №\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_END_LAST\"] = \"по последнюю букву\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text\";  // untranslated\nBlockly.Msg[\"TEXT_GET_SUBSTRING_INPUT_IN_TEXT\"] = \"в тексте\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_START_FIRST\"] = \"взять подстроку с первой буквы\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_START_FROM_END\"] = \"взять подстроку с буквы № с конца\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_START_FROM_START\"] = \"взять подстроку с буквы №\";\nBlockly.Msg[\"TEXT_GET_SUBSTRING_TAIL\"] = \"\";  // untranslated\nBlockly.Msg[\"TEXT_GET_SUBSTRING_TOOLTIP\"] = \"Возвращает указанную часть текста.\";\nBlockly.Msg[\"TEXT_INDEXOF_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#finding-text\";  // untranslated\nBlockly.Msg[\"TEXT_INDEXOF_OPERATOR_FIRST\"] = \"найти первое вхождение текста\";\nBlockly.Msg[\"TEXT_INDEXOF_OPERATOR_LAST\"] = \"найти последнее вхождение текста\";\nBlockly.Msg[\"TEXT_INDEXOF_TITLE\"] = \"в тексте %1 %2 %3\";\nBlockly.Msg[\"TEXT_INDEXOF_TOOLTIP\"] = \"Возвращает номер позиции первого/последнего вхождения первого текста во  втором.  Возвращает %1, если текст не найден.\";\nBlockly.Msg[\"TEXT_ISEMPTY_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#checking-for-empty-text\";  // untranslated\nBlockly.Msg[\"TEXT_ISEMPTY_TITLE\"] = \"%1 пуст\";\nBlockly.Msg[\"TEXT_ISEMPTY_TOOLTIP\"] = \"Возвращает значение истина, если предоставленный текст пуст.\";\nBlockly.Msg[\"TEXT_JOIN_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#text-creation\";  // untranslated\nBlockly.Msg[\"TEXT_JOIN_TITLE_CREATEWITH\"] = \"создать текст из\";\nBlockly.Msg[\"TEXT_JOIN_TOOLTIP\"] = \"Создаёт фрагмент текста, объединяя любое число элементов\";\nBlockly.Msg[\"TEXT_LENGTH_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#text-modification\";  // untranslated\nBlockly.Msg[\"TEXT_LENGTH_TITLE\"] = \"длина %1\";\nBlockly.Msg[\"TEXT_LENGTH_TOOLTIP\"] = \"Возвращает число символов (включая пробелы) в заданном тексте.\";\nBlockly.Msg[\"TEXT_PRINT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#printing-text\";  // untranslated\nBlockly.Msg[\"TEXT_PRINT_TITLE\"] = \"напечатать %1\";\nBlockly.Msg[\"TEXT_PRINT_TOOLTIP\"] = \"Печатает текст, число или другой объект.\";\nBlockly.Msg[\"TEXT_PROMPT_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#getting-input-from-the-user\";  // untranslated\nBlockly.Msg[\"TEXT_PROMPT_TOOLTIP_NUMBER\"] = \"Запросить у пользователя число.\";\nBlockly.Msg[\"TEXT_PROMPT_TOOLTIP_TEXT\"] = \"Запросить у пользователя текст.\";\nBlockly.Msg[\"TEXT_PROMPT_TYPE_NUMBER\"] = \"запросить число с подсказкой\";\nBlockly.Msg[\"TEXT_PROMPT_TYPE_TEXT\"] = \"запросить текст с подсказкой\";\nBlockly.Msg[\"TEXT_REPLACE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#replacing-substrings\";\nBlockly.Msg[\"TEXT_REPLACE_MESSAGE0\"] = \"заменить %1 на %2 в %3\";\nBlockly.Msg[\"TEXT_REPLACE_TOOLTIP\"] = \"Заменить все вхождения некоторого текста другим текстом.\";\nBlockly.Msg[\"TEXT_REVERSE_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#reversing-text\";\nBlockly.Msg[\"TEXT_REVERSE_MESSAGE0\"] = \"изменить порядок на обратный %1\";\nBlockly.Msg[\"TEXT_REVERSE_TOOLTIP\"] = \"Меняет порядок символов в тексте на обратный.\";\nBlockly.Msg[\"TEXT_TEXT_HELPURL\"] = \"https://ru.wikipedia.org/wiki/Строковый_тип\";\nBlockly.Msg[\"TEXT_TEXT_TOOLTIP\"] = \"Буква, слово или строка текста.\";\nBlockly.Msg[\"TEXT_TRIM_HELPURL\"] = \"https://github.com/google/blockly/wiki/Text#trimming-removing-spaces\";  // untranslated\nBlockly.Msg[\"TEXT_TRIM_OPERATOR_BOTH\"] = \"обрезать пробелы с двух сторон\";\nBlockly.Msg[\"TEXT_TRIM_OPERATOR_LEFT\"] = \"обрезать пробелы слева\";\nBlockly.Msg[\"TEXT_TRIM_OPERATOR_RIGHT\"] = \"обрезать пробелы справа\";\nBlockly.Msg[\"TEXT_TRIM_TOOLTIP\"] = \"Возвращает копию текста с пробелами, удалёнными с одного или обоих концов.\";\nBlockly.Msg[\"TODAY\"] = \"Сегодня\";\nBlockly.Msg[\"UNDO\"] = \"Отменить\";\nBlockly.Msg[\"UNNAMED_KEY\"] = \"без названия\";\nBlockly.Msg[\"VARIABLES_DEFAULT_NAME\"] = \"элемент\";\nBlockly.Msg[\"VARIABLES_GET_CREATE_SET\"] = \"Создать блок \\\"присвоить\\\" для %1\";\nBlockly.Msg[\"VARIABLES_GET_HELPURL\"] = \"https://github.com/google/blockly/wiki/Variables#get\";  // untranslated\nBlockly.Msg[\"VARIABLES_GET_TOOLTIP\"] = \"Возвращает значение этой переменной.\";\nBlockly.Msg[\"VARIABLES_SET\"] = \"%1 = %2\";\nBlockly.Msg[\"VARIABLES_SET_CREATE_GET\"] = \"Создать вставку %1\";\nBlockly.Msg[\"VARIABLES_SET_HELPURL\"] = \"https://github.com/google/blockly/wiki/Variables#set\";  // untranslated\nBlockly.Msg[\"VARIABLES_SET_TOOLTIP\"] = \"Присваивает переменной значение вставки.\";\nBlockly.Msg[\"VARIABLE_ALREADY_EXISTS\"] = \"Переменная с именем '%1' уже существует.\";\nBlockly.Msg[\"VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE\"] = \"Название переменной '%1' уже используется другой типа: '%2'.\";\nBlockly.Msg[\"WORKSPACE_ARIA_LABEL\"] = \"Рабочая область Blockly\";\nBlockly.Msg[\"WORKSPACE_COMMENT_DEFAULT_TEXT\"] = \"Напишите здесь что-нибудь...\";\nBlockly.Msg[\"CONTROLS_FOREACH_INPUT_DO\"] = Blockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"];\nBlockly.Msg[\"CONTROLS_FOR_INPUT_DO\"] = Blockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"];\nBlockly.Msg[\"CONTROLS_IF_ELSEIF_TITLE_ELSEIF\"] = Blockly.Msg[\"CONTROLS_IF_MSG_ELSEIF\"];\nBlockly.Msg[\"CONTROLS_IF_ELSE_TITLE_ELSE\"] = Blockly.Msg[\"CONTROLS_IF_MSG_ELSE\"];\nBlockly.Msg[\"CONTROLS_IF_IF_TITLE_IF\"] = Blockly.Msg[\"CONTROLS_IF_MSG_IF\"];\nBlockly.Msg[\"CONTROLS_IF_MSG_THEN\"] = Blockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"];\nBlockly.Msg[\"CONTROLS_WHILEUNTIL_INPUT_DO\"] = Blockly.Msg[\"CONTROLS_REPEAT_INPUT_DO\"];\nBlockly.Msg[\"LISTS_CREATE_WITH_ITEM_TITLE\"] = Blockly.Msg[\"VARIABLES_DEFAULT_NAME\"];\nBlockly.Msg[\"LISTS_GET_INDEX_HELPURL\"] = Blockly.Msg[\"LISTS_INDEX_OF_HELPURL\"];\nBlockly.Msg[\"LISTS_GET_INDEX_INPUT_IN_LIST\"] = Blockly.Msg[\"LISTS_INLIST\"];\nBlockly.Msg[\"LISTS_GET_SUBLIST_INPUT_IN_LIST\"] = Blockly.Msg[\"LISTS_INLIST\"];\nBlockly.Msg[\"LISTS_INDEX_OF_INPUT_IN_LIST\"] = Blockly.Msg[\"LISTS_INLIST\"];\nBlockly.Msg[\"LISTS_SET_INDEX_INPUT_IN_LIST\"] = Blockly.Msg[\"LISTS_INLIST\"];\nBlockly.Msg[\"MATH_CHANGE_TITLE_ITEM\"] = Blockly.Msg[\"VARIABLES_DEFAULT_NAME\"];\nBlockly.Msg[\"PROCEDURES_DEFRETURN_COMMENT\"] = Blockly.Msg[\"PROCEDURES_DEFNORETURN_COMMENT\"];\nBlockly.Msg[\"PROCEDURES_DEFRETURN_DO\"] = Blockly.Msg[\"PROCEDURES_DEFNORETURN_DO\"];\nBlockly.Msg[\"PROCEDURES_DEFRETURN_PROCEDURE\"] = Blockly.Msg[\"PROCEDURES_DEFNORETURN_PROCEDURE\"];\nBlockly.Msg[\"PROCEDURES_DEFRETURN_TITLE\"] = Blockly.Msg[\"PROCEDURES_DEFNORETURN_TITLE\"];\nBlockly.Msg[\"TEXT_APPEND_VARIABLE\"] = Blockly.Msg[\"VARIABLES_DEFAULT_NAME\"];\nBlockly.Msg[\"TEXT_CREATE_JOIN_ITEM_TITLE_ITEM\"] = Blockly.Msg[\"VARIABLES_DEFAULT_NAME\"];\n\nBlockly.Msg[\"MATH_HUE\"] = \"230\";\nBlockly.Msg[\"LOOPS_HUE\"] = \"120\";\nBlockly.Msg[\"LISTS_HUE\"] = \"260\";\nBlockly.Msg[\"LOGIC_HUE\"] = \"210\";\nBlockly.Msg[\"VARIABLES_HUE\"] = \"330\";\nBlockly.Msg[\"TEXTS_HUE\"] = \"160\";\nBlockly.Msg[\"PROCEDURES_HUE\"] = \"290\";\nBlockly.Msg[\"COLOUR_HUE\"] = \"20\";\nBlockly.Msg[\"VARIABLES_DYNAMIC_HUE\"] = \"310\";\n","<template>\n  <div id=\"app\">\n    <div class=\"addconst\">\n      <input type=\"text\" ref=\"const_name\" name=\"const_name\" placeholder=\"Название\" />\n      <input type=\"text\" ref=\"const_short_name\" name=\"const_short_name\" placeholder=\"Обозначение в алгоритме\" />\n      <button v-on:click=\"updateConsts()\">Добавить константу</button>\n    </div>\n    <div class=\"tabs\">\n      <div class=\"tabs__header\">\n        <ul class=\"tabs__buttons\">\n          <li v-on:click=\"openTab(1)\" v-bind:class=\"{ tabs__button: true, active: openedTab === 1 }\">ПРОГРАММНЫЙ КОД</li>\n          <li v-on:click=\"openTab(2)\" v-bind:class=\"{ tabs__button: true, active: openedTab === 2 }\">ВИЗУАЛЬНЫЙ КОД</li>\n        </ul>\n      </div>\n      <div class=\"tabs__body\">\n        <div v-bind:style=\"{ opacity: openedTab === 1 ? '1' : '0', visibility: openedTab === 1 ? 'visible' : 'hidden' }\" class=\"tabs__item\">\n          <textarea v-html=\"code\" ref=\"code\"></textarea>\n        </div>\n        <div v-bind:style=\"{ opacity: openedTab === 2 ? '1' : '0', visibility: openedTab === 2 ? 'visible' : 'hidden' }\" class=\"tabs__item\">\n          <div id=\"blockly\" class=\"blocklyDiv\" ref=\"blocklyDiv\"></div>\n        </div>\n      </div>\n    </div>\n\n    <button v-on:click=\"fromXML()\">Сгененрировать блоки</button>\n    <button v-on:click=\"toXML()\">Экспорт в xml</button>\n\n  </div>\n</template>\n\n<script>\n/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Main Vue component that includes the Blockly component.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\nimport './generators/customlng';\nimport './generators/customlng/colour';\nimport './generators/customlng/logic';\nimport './generators/customlng/loops';\nimport './generators/customlng/math';\nimport './generators/customlng/procedures';\nimport './generators/customlng/text';\nimport './generators/customlng/variables_dynamic';\nimport './generators/customlng/variables';\nimport './blocks/stocks';\nimport './prompt';\n\nimport {constants} from './blocks/stocks';\n\nimport Blockly from 'blockly';\nimport * as Ru from './langs/ru';\n\nlet acorn = require(\"acorn\");\n\nexport default {\n  name: 'app',\n  data(){\n    return {\n      constants: [],\n      workspace: null,\n      openedTab: 1,\n      code: '',\n      options: {\n        media: 'media/',\n        grid:\n          {\n            spacing: 25,\n            length: 3,\n            colour: '#ccc',\n            snap: true\n          },\n        toolbox:\n        `<xml>\n        <category name=\"ИНСТРУМЕНТЫ\" colour=\"%{BKY_MATH_HUE}\">\n          <block type=\"variables_set\">\n            <field name=\"VAR\">ДОСТУПНОСТЬ</field>\n          </block>\n          <block type=\"math_number\">\n            <field name=\"NUM\">123</field>\n          </block>\n          <block type=\"custom_arithmetic\"></block>\n          <block type=\"custom_condition\"></block>\n          <block type=\"custom_logic_operation\"></block>\n          <block type=\"logic_compare\"></block>\n          <block type=\"logic_ternary\"></block>\n          <block type=\"logic_negate\"></block>\n          <block type=\"logic_not_empty\"></block>\n          <block type=\"logic_boolean\"></block>\n        </category>\n        <category name=\"ПЕРЕМЕННЫЕ\" custom=\"VARIABLE\" colour=\"%{BKY_VARIABLES_HUE}\">\n          <block type=\"variables_get\">\n              <field name=\"VAR\">sss</field>\n          </block>\n        </category>\n        <category name=\"КОНСТАНТЫ\" colour=\"%{BKY_VARIABLES_HUE}\" custom=\"CONSTANTS\"></category>\n        </xml>`\n      },\n      xml: ''\n    }\n  },\n  mounted() {\n    var options = this.options || {};\n    if (!options.toolbox) {\n      options.toolbox = this.$refs[\"blocklyToolbox\"];\n    }\n    Blockly.setLocale(Ru);\n    this.workspace = Blockly.inject(this.$refs[\"blocklyDiv\"], options);\n    this.workspace.registerToolboxCategoryCallback(\n    'CONSTANTS', this.coloursFlyoutCallback)\n  },\n  methods: {\n    coloursFlyoutCallback () {\n      var xmlList = [];\n      if (Blockly.Blocks['constant_get']) {\n        for (var i = 0; i < constants.length; i++) {\n          var blockText = '<block type=\"constant_get\">' +\n              '<field name=\"A\">' + constants[i][0] + '</field>' +\n              '</block>';\n          var block = Blockly.Xml.textToDom(blockText);\n          xmlList.push(block);\n        }\n      }\n      return xmlList;\n    },\n    updateConsts(){\n      constants.push([this.$refs[\"const_name\"].value, this.$refs[\"const_short_name\"].value]);\n      this.workspace.toolbox_.refreshSelection();\n      this.$refs[\"const_name\"].value = '';\n      this.$refs[\"const_short_name\"].value = '';\n    },\n    openTab(tab){\n      this.openedTab = tab; \n      if(tab === 1) this.showCode();\n    },\n    showCode() {\n      this.$refs[\"code\"].value = Blockly.CustomLng.workspaceToCode(this.workspace);\n    },\n    toXML() {\n      var xmlDom = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);\n      var xmlText = Blockly.Xml.domToPrettyText(xmlDom);\n      console.log(xmlText)\n    },\n    getArguments(arr) {\n      arr.forEach((node, i) => {\n        this.xml += `<value name=\"${i === 0 ? 'A' : 'B'}\">`;\n        if(node.type === 'CallExpression'){\n          this.xml += `<block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field>`;\n          this.getArguments(node.arguments);\n          this.xml += `</block>`;\n        }else{\n          this.xml += `<block type=\"math_number\"><field name=\"NUM\">${node.value}</field></block>`\n        }\n        this.xml += `</value>`;\n      });\n    },\n    fromXML() {\n      //const code = `ЧАСТН(ЧАСТН(1, 1), ЧАСТН(1, 1))`;\\\n      const code = this.$refs[\"code\"].value;\n\n      const codeObj = acorn.parse(code, {ecmaVersion: 2020}).body;\n\n      this.xml = `<xml xmlns=\"https://developers.google.com/blockly/xml\">`;\n\n      for (let key in codeObj) {\n        //console.log(codeObj[key]);\n        const express = codeObj[key];\n        if(express.type === 'ExpressionStatement'){\n          this.xml += `<block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field>`;\n          this.getArguments(express.expression.arguments);\n          this.xml += `</block>`;\n        }\n      }\n\n      this.xml += `</xml>`;\n      //console.log(this.xml)     \n\n      /*const xml2 = `<xml xmlns=\"https://developers.google.com/blockly/xml\">\n  <variables>\n    <variable>a</variable>\n    <variable>b</variable>\n  </variables>\n  <block type=\"variables_set\">\n    <field name=\"VAR\">a</field>\n    <value name=\"VALUE\">\n      <block type=\"math_number\">\n        <field name=\"NUM\">123</field>\n      </block>\n    </value>\n    <next>\n      <block type=\"variables_set\">\n        <field name=\"VAR\">b</field>\n        <value name=\"VALUE\">\n          <block type=\"logic_compare\">\n            <field name=\"OP\">EQ</field>\n            <value name=\"A\">\n              <block type=\"math_arithmetic\">\n                <field name=\"OP\">ADD</field>\n                <value name=\"A\">\n                  <block type=\"variables_get\">\n                    <field name=\"VAR\">a</field>\n                  </block>\n                </value>\n              </block>\n            </value>\n          </block>\n        </value>\n      </block>\n    </next>\n  </block>\n</xml>`;*/\n\n      if (typeof this.xml != \"string\" || this.xml.length < 5) {\n          return false;\n      }\n      try {\n          var dom = Blockly.Xml.textToDom(this.xml);\n          Blockly.mainWorkspace.clear();\n          Blockly.Xml.domToWorkspace(dom, Blockly.mainWorkspace);\n          return true;\n      } catch (e) {\n          return false;\n      }\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  padding: 10px;\n}\n\nhtml, body {\n  margin: 0;\n}\n\n.tabs__buttons {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n.tabs__button {\n    display: inline-block;\n    padding: 10px;\n    cursor: pointer;\n    margin: 0 10px;\n}\n\n.tabs__button.active {\n    font-weight: bold;\n}\n\n.tabs__body{\n  position: relative;\n  width: 100%;\n  height: 700px;\n}\n\n.tabs__item {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.tabs__item textarea{\n  width: 100%;\n  height: 100%;\n}\n\n#blockly{\n  width: 100%;\n  height: 700px;\n}\n\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=0eb09137&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n//Add unimported components to ignore list to prevent warnings.\nVue.config.ignoredElements = ['field','block','category','xml','mutation','value','sep']\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n"],"sourceRoot":""}